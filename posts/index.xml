<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Nikita Galaiko</title><link>https://galaiko.rocks/posts/</link><description>Recent content in Posts on Nikita Galaiko</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>(c) 2018. Powered by Hugo, Docker Swarm and Raspberry Pi (for some reason)</copyright><lastBuildDate>Mon, 24 Jun 2019 21:28:26 +0200</lastBuildDate><atom:link href="https://galaiko.rocks/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Raspberry Pi: K8s cluster</title><link>https://galaiko.rocks/posts/blog/raspberry-k8s/</link><pubDate>Mon, 24 Jun 2019 21:28:26 +0200</pubDate><guid>https://galaiko.rocks/posts/blog/raspberry-k8s/</guid><description>I spent too much time configuring Kubernetes cluster on Raspberry Pi today, so here are notes for my future self on how to do that:
SD card Download operation system.
I am using HypriotOS v1.10.0 It is based on Raspbian Buster Lite, has a preinstalled docker and some other minor things to simplify cluster setup:
$ uname -a Linux node-red 4.14.98-v7+ #1200 SMP Tue Feb 12 20:27:48 GMT 2019 armv7l GNU/Linux $ docker version Client: Version: 18.</description><content type="html"><![CDATA[<p>I spent too much time configuring Kubernetes cluster on Raspberry Pi today, so here are notes for my future
self on how to do that:</p>
<h2 id="sd-card">SD card</h2>
<ul>
<li>
<p>Download operation system.</p>
<p>I am using <a href="https://github.com/hypriot/image-builder-rpi/releases/download/v1.10.0/hypriotos-rpi-v1.10.0.img.zip">HypriotOS v1.10.0</a>
It is based on <strong>Raspbian Buster Lite</strong>, has a preinstalled docker and some other minor things
to simplify cluster setup:</p>
<pre><code>  $ uname -a 
  Linux node-red 4.14.98-v7+ #1200 SMP Tue Feb 12 20:27:48 GMT 2019 armv7l GNU/Linux
  $ docker version
  Client:
   Version:           18.06.3-ce
   API version:       1.38
   Go version:        go1.10.3
   Git commit:        d7080c1
   Built:             Wed Feb 20 02:42:54 2019
   OS/Arch:           linux/arm
   Experimental:      false

  Server:
   Engine:
   Version:          18.06.3-ce
   API version:      1.38 (minimum version 1.12)
   Go version:       go1.10.3
   Git commit:       d7080c1
   Built:            Wed Feb 20 02:38:25 2019
   OS/Arch:          linux/arm
   Experimental:     false
</code></pre>
</li>
<li>
<p>Flash it to SD cards using <a href="https://github.com/hypriot/flash/releases">flash</a></p>
<p>Don&rsquo;t forget to define a hostname. It will save you some time later.</p>
<pre><code>  $ flash -n node-red ./Downloads/hypriotos-rpi-v1.10.0.img
</code></pre>
</li>
<li>
<p>Provision all nodes you have like this and boot them up.</p>
</li>
<li>
<p>Install Kubernetes on <strong>all</strong> nodes.</p>
<p>Note the version here: <code>1.13.5</code>. Because of changes in <code>1.14.0</code>, Kubernetes requires enabled pids
cgroup. But kernels before <code>4.19.46-v7+</code> do not support it. If you are reading this after some
time, it should be fixed, and the latest version of Kubernetes might work just fine.</p>
<pre><code>  $ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - &amp;&amp; \
   echo &quot;deb http://apt.kubernetes.io/ kubernetes-xenial main&quot; | sudo tee /etc/apt/sources.list.d/kubernetes.list &amp;&amp; \
   sudo apt-get update -q &amp;&amp; \
   sudo apt-get install -qy kubeadm=1.13.5 kubectl=1.13.5 kubelet=1.13.5
</code></pre>
</li>
<li>
<p>Initialize Kubernetes on the <strong>master</strong> node:</p>
<pre><code>$ sudo kubeadm init
</code></pre><p>Notice <code>sudo</code> here. For some reason, if you do it as <code>root</code>, it can fail with an error (couldn&rsquo;t
find what the error was :( )</p>
<p>If all goes fine, you will see an output similar to:</p>
<pre><code>...
Your Kubernetes master has initialized successfully!
To start using your cluster, you need to run the following as a regular user:
  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  You should now deploy a pod network to the cluster.
Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/
You can now join any number of machines by running the following on each node
as root:
  kubeadm join --token TOKEN 192.168.1.100:6443 --discovery-token-ca-cert-hash HASH
</code></pre><pre><code>
</code></pre></li>
<li>
<p>Do what the output says:</p>
<pre><code>$ sudo cp /etc/kubernetes/admin.conf $HOME/
$ sudo chown $(id -u):$(id -g) $HOME/admin.conf
$ export KUBECONFIG=$HOME/admin.conf
</code></pre><pre><code> Now you should be able to list all nodes. There is a single __NotReady__ __master__ 
 node at this point:
</code></pre><pre><code> $ kubectl get nodes
 NAME         STATUS     ROLES    AGE   VERSION
 node-red     NotReady   master   17m   v1.13.5
</code></pre><pre><code>
</code></pre></li>
<li>
<p>Add other nodes to the cluster.</p>
<pre><code>$ sudo kubeadm join --token TOKEN 192.168.1.100:6443 --discovery-token-ca-cert-hash HASH
</code></pre><p>Notice <code>sudo</code> again.</p>
</li>
<li>
<p>Now, you should be able to see all nodes from the master node:</p>
<pre><code>$ kubectl get nodes
NAME         STATUS     ROLES    AGE    VERSION
node-black   NotReady   &lt;none&gt;   106m   v1.13.5
node-blue    NotReady   &lt;none&gt;   105m   v1.13.5
node-green   NotReady   &lt;none&gt;   105m   v1.13.5
node-red     NotReady   master   110m   v1.13.5
</code></pre></li>
<li>
<p>Deploy container network from the <strong>master</strong> node.</p>
<pre><code>$ kubectl apply -f &quot;https://cloud.weave.works/k8s/net?k8s-version=1.13.5&quot;
</code></pre></li>
<li>
<p>After some time, all nodes should be ready.</p>
<pre><code>$ kubectl get nodes
NAME         STATUS     ROLES    AGE    VERSION
node-black   Ready     &lt;none&gt;   106m   v1.13.5
node-blue    Ready     &lt;none&gt;   105m   v1.13.5
node-green   Ready     &lt;none&gt;   105m   v1.13.5
node-red     Ready     master   110m   v1.13.5
</code></pre></li>
</ul>
<h1 id="links">Links</h1>
<ul>
<li><a href="https://blog.hypriot.com/post/setup-kubernetes-raspberry-pi-cluster/">https://blog.hypriot.com/post/setup-kubernetes-raspberry-pi-cluster/</a></li>
<li><a href="https://kubecloud.io/setting-up-a-kubernetes-1-11-raspberry-pi-cluster-using-kubeadm-952bbda329c8">https://kubecloud.io/setting-up-a-kubernetes-1-11-raspberry-pi-cluster-using-kubeadm-952bbda329c8</a></li>
<li><a href="https://github.com/hypriot/flash">https://github.com/hypriot/flash</a></li>
<li><a href="https://github.com/teamserverless/k8s-on-raspbian/issues/16">https://github.com/teamserverless/k8s-on-raspbian/issues/16</a></li>
</ul>
]]></content></item><item><title>Forced wrapper interface</title><link>https://galaiko.rocks/posts/blog/interface-wrapper/</link><pubDate>Sun, 24 Mar 2019 10:03:39 +0100</pubDate><guid>https://galaiko.rocks/posts/blog/interface-wrapper/</guid><description>Let&amp;rsquo;s take this interface as an example:
type Block interface { Chain(Block) (string, error) } I want to make sure that input Block is always valid, and the output string is never empty if the error is nil. How can I do that? There are a couple of options.
The first option is to rely on every implementation to validate it, but it means a boilerplate code that is easy to miss.</description><content type="html"><![CDATA[<p>Let&rsquo;s take this interface as an example:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Block</span> <span class="kd">interface</span> <span class="p">{</span>
    <span class="nf">Chain</span><span class="p">(</span><span class="nx">Block</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>I want to make sure that input <code>Block</code> is always valid, and the output string is never empty if the error is
<code>nil</code>. How can I do that? There are a couple of options.</p>
<p>The first option is to rely on every implementation to validate it, but it means a boilerplate code that is easy
to miss.</p>
<p>Another option is to create another layer and move all of the logic there. Something like:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Chain</span> <span class="kd">interface</span> <span class="p">{</span>
    <span class="nf">Add</span><span class="p">(</span><span class="nx">Block</span><span class="p">)</span> <span class="kt">error</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Block</span> <span class="kd">interface</span> <span class="p">{</span>
    <span class="nf">Hash</span><span class="p">()</span> <span class="kt">string</span>
<span class="p">}</span>
</code></pre></div><p>It&rsquo;s better, but I don&rsquo;t want to create another entity.</p>
<p>I can also create an implementation that wraps all other implementations and does all the checks:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">check</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">i</span> <span class="nx">block</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">Check</span><span class="p">(</span><span class="nx">i</span> <span class="nx">Block</span><span class="p">)</span> <span class="o">*</span><span class="nx">check</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="nx">check</span><span class="p">{</span>
        <span class="nx">i</span><span class="p">:</span> <span class="nx">i</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">check</span><span class="p">)</span> <span class="nf">Chain</span><span class="p">(</span><span class="nx">b</span> <span class="nx">Block</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">hash</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">i</span><span class="p">.</span><span class="nf">Chain</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>

    <span class="k">if</span> <span class="nx">hash</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;err is nil, and hash is empty, do something here.&#34;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">hash</span><span class="p">,</span> <span class="nx">err</span>
<span class="p">}</span>
</code></pre></div><p>There is still the same problem: it&rsquo;s easy to forget to wrap a custom implementation into the check and skip
validation.</p>
<p>Likely, I found a way to enforce it during the build time. To do that, <code>Block</code> interface and the <code>check</code>
implementation should be slightly changed:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">block</span> <span class="kd">interface</span> <span class="p">{</span>
    <span class="nf">Chain</span><span class="p">(</span><span class="nx">Block</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Block</span> <span class="kd">interface</span> <span class="p">{</span>
    <span class="nx">block</span>

    <span class="nf">p</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Check</span><span class="p">(</span><span class="nx">i</span> <span class="nx">block</span><span class="p">)</span> <span class="nx">Block</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">&amp;</span><span class="nx">check</span><span class="p">{</span>
        <span class="nx">i</span><span class="p">:</span> <span class="nx">i</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">check</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">i</span> <span class="nx">block</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">check</span><span class="p">)</span> <span class="nf">Chain</span><span class="p">(</span><span class="nx">b</span> <span class="nx">Block</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">hash</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">i</span><span class="p">.</span><span class="nf">Chain</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>

    <span class="k">if</span> <span class="nx">hash</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;err is nil, and hash is empty, do something here.&#34;</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">hash</span><span class="p">,</span> <span class="nx">err</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">check</span><span class="p">)</span> <span class="nf">p</span><span class="p">()</span> <span class="p">{}</span>
</code></pre></div><p>Now, it&rsquo;s impossible to implement <code>Block</code> interface, because there is no way to implement a private method.</p>
<p>The only way to do that is to implement all public methods and call <code>Check</code> function.</p>
<p>You can find full example code on <a href="https://github.com/ngalayko/examples/tree/master/protection">GitHub</a></p>
]]></content></item><item><title>Building a peer to peer messenger</title><link>https://galaiko.rocks/posts/blog/peer-to-peer/</link><pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/blog/peer-to-peer/</guid><description>The idea of a peer to peer something is to create a system that doesn&amp;rsquo;t require any centralized server to operate. In the case of a messenger, two users should be able to communicate directly between each other until at least one of their instances is running.
That&amp;rsquo;s why the most important part of such systems is a discovery. If peers can&amp;rsquo;t find each other, it&amp;rsquo;s useless.
The first problem is to build a messenger app, that can discover the same apps in the network and securely communicate with each other.</description><content type="html"><![CDATA[<p><img src="/media/p2p/p2p.jpg" alt=""></p>
<p>The idea of a peer to peer <strong>something</strong> is to create a system that doesn&rsquo;t require any centralized server to
operate. In the case of a messenger, two users should be able to communicate directly between each other until at
least one of their instances is running.</p>
<p>That&rsquo;s why the most important part of such systems is a discovery. If peers can&rsquo;t find each other, it&rsquo;s useless.</p>
<p>The first problem is to build a messenger app, that can discover the same apps in the network and securely
communicate with each other.</p>
<p>The second problem is to allow regular people (<strong>non-programmers</strong>) to use it. As I can see, there are two ways
here. First is to build a mobile app and discover peers via Bluetooth or WiFi, plus have some bridge that allows
joining two local networks together via the internet.</p>
<p>I chose another way. Instead, there is a command line app for usage within the same network. And a dispatcher app
which purpose is to manage a cloud with dockerized peers and create a new instance for every user that needs it.</p>
<ol>
<li>User goes to a dispatcher webpage and clicks <strong>Login</strong></li>
<li>Dispatcher creates a new peer in a docker container and redirects the user to it</li>
</ol>
<p>I don&rsquo;t think that this approach is super scalable and makes sense in the real world; it requires too many
resources for a single user. But I have chosen it because it is more fun to implement for me as it needs more
infrastructure work.</p>
<p><img src="/media/p2p/cloud.jpg" alt="cloud"></p>
<h2 id="peer">Peer</h2>
<h3 id="communication">Communication</h3>
<p>Peers use <a href="https://grpc.io/">gRPC</a> to communicate with each other. It has a few benefits:</p>
<ol>
<li>There is a well defined <a href="https://github.com/ngalayko/p2p/tree/master/instance/messages/proto">.proto</a> API
schema. So it shouldn&rsquo;t be a problem to build clients using other programming languages.</li>
<li>Stream support. Peers can exchange messages over a single TCP connection (thanks to HTTP/2). There is also
ongoing work on supporting UDP as a transport. Initially, I wanted to use UDP based communication with QUIC
but decided to go with gRPC because of other features.</li>
<li>Small things like TLS, custom resolvers, compression, schema versioning, binary marshaling out of the box.</li>
</ol>
<p>Overall communication scenario between two peers looks like this:</p>
<ol>
<li>Check if there is an open stream connection to the peer
<ul>
<li>If it exists, send a message using the connection</li>
</ul>
</li>
<li>Exchange public keys with a peer using an insecure connection</li>
<li>Open a secure stream connection to the peer and send a message.</li>
</ol>
<h2 id="discovery">Discovery</h2>
<p>In general, discovery is used to find other peers in the network. Discovery message contains name, id, ports,
address and a list of known peers. Public key not included in the discovery as it makes discovery message too big
to be transmitted via UDP multicast.</p>
<p>It also allows the peer to find its address by listening for its own announcement message.</p>
<p>UDP multicast discovery allows discovery within the same network. Perfect for standalone runs without docker.</p>
<p>Peers also can register itself in <a href="https://www.consul.io/">Consul</a> catalog and fetch information about other
peers from there. Perfect for dockerized runs inside docker swarm as it also can be used by
<a href="https://traefik.io/">Traefik</a> to automatically create routes for new peers and monitor their health.</p>
<h2 id="dispatcher">Dispatcher</h2>
<p>The goal of this service is to start a new peer by connecting to a docker swarm API, and redirect a user
to his peer instance.</p>
<p>Thanks to consul peers registration, it can fetch vacant peers directly from consul and use the information to
have a small buffer of unused peers. It is needed as a peer takes a few seconds to start and generate a
certificate.</p>
<p>The main logic for the service is relatively simple:</p>
<ol>
<li>Check if the user has an assigned peer (it is stored it his cookies)
<ul>
<li>If it is there, redirect to the peer.</li>
</ul>
</li>
<li>Pop an unused peer from consul</li>
<li>Store its credentials in the user&rsquo;s session</li>
<li>Redirect the user to the peer.</li>
</ol>
<h2 id="bridge">Bridge</h2>
<p>This is not implemented part so far, but the idea is to create another app that has two parts: discovery and
proxy.</p>
<p>Two bridges in different networks, for example, a cloud network from the scheme above and a local network, should
connect and exchange information about known peers.</p>
<p>When a message is sent from peer in the one network to the peer in another, bridge acts as a gateway
and proxies the connection between two peers.</p>
<p>Final architecture:</p>
<p><img src="/media/p2p/bridge.jpg" alt="bridge"></p>
<p>You can find the code and maybe participate at <a href="https://github.com/ngalayko/p2p">github</a>.</p>
<h2 id="links">Links:</h2>
<ul>
<li><a href="https://p2p.galaiko.rocks">Messenger</a></li>
<li><a href="https://github.com/ngalayko/p2p">GitHub</a></li>
<li><a href="https://traefik.io/">Traefik</a></li>
<li><a href="https://www.consul.io/">Consul</a></li>
</ul>
]]></content></item><item><title>Golang: Data races</title><link>https://galaiko.rocks/posts/blog/go-data-races/</link><pubDate>Sat, 02 Feb 2019 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/blog/go-data-races/</guid><description>I have noticed that many people who have started using go have troubles when it comes to concurrent programming. Concurrency in go is indeed the most complicated part of the language, especially for people who don&amp;rsquo;t have much experience working with it. There are no compile time validations to prevent a programmer from creating race conditions, but go provides all the needed tools and instruments to avoid it.
I will try to explain what is a race condition, why does it happen and how to avoid it.</description><content type="html"><![CDATA[<p>I have noticed that many people who have started using go have troubles when it
comes to concurrent programming. Concurrency in go is indeed the most
complicated part of the language, especially for people who don&rsquo;t have much
experience working with it. There are no compile time validations to prevent a
programmer from creating race conditions, but go provides all the needed
tools and instruments to avoid it.</p>
<p>I will try to explain what is a race condition, why does it happen and how to
avoid it.</p>
<p>Wikipedia:</p>
<blockquote>
<p>A race condition or race hazard is the behavior of an electronics, software,
or another system where the system&rsquo;s substantive behavior is dependent on the
sequence or timing of other uncontrollable events. It becomes a bug when one or
more of the possible behaviors is undesirable.</p>
</blockquote>
<p>Let&rsquo;s say we have a list of links to Wikipedia pages that we want to download.</p>
<p>I wrote a <a href="https://github.com/ngalayko/examples/tree/master/concurrency/examples/download">simple tool</a> as an example that uses the interface to do that:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Downloader</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">Download</span><span class="p">(</span><span class="o">...*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span> <span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">][]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>The most straightforward implementation would be to iterate over a list of urls,
download each of them and store in the resulting map:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Downloader</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">client</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">Downloader</span><span class="p">)</span> <span class="nf">Download</span><span class="p">(</span><span class="nx">urls</span> <span class="o">...*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span> <span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">][]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">][]</span><span class="kt">byte</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">urls</span><span class="p">))</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">u</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">urls</span> <span class="p">{</span>
		<span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">download</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error downloading %s: %s&#34;</span><span class="p">,</span> <span class="nx">u</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
		<span class="p">}</span>
		<span class="nx">result</span><span class="p">[</span><span class="nx">u</span><span class="p">]</span> <span class="p">=</span> <span class="nx">data</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">Downloader</span><span class="p">)</span> <span class="nf">download</span><span class="p">(</span><span class="nx">u</span> <span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
	<span class="k">return</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>The code works, but not so fast, because the total time to download links is a sum
of times to download for each link. It&rsquo;s really inefficient when the number of
links is big. For me, it took over 16s to download 100 links. To improve it, let&rsquo;s
change the code, so we download all links at the same time:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">Downloader</span><span class="p">)</span> <span class="nf">Download</span><span class="p">(</span><span class="nx">urls</span> <span class="o">...*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span> <span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">][]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">][]</span><span class="kt">byte</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">urls</span><span class="p">))</span>

	<span class="nx">wg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">u</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">urls</span> <span class="p">{</span>
		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
		<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">u</span> <span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">data</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">download</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span>
			<span class="nx">result</span><span class="p">[</span><span class="nx">u</span><span class="p">]</span> <span class="p">=</span> <span class="nx">data</span>
			<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="p">}(</span><span class="nx">u</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>

	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></div><p>To do that, we have wrapped our <code>download</code> function to run in its goroutine.
Wait group here is used to wait until all of the urls are downloaded, so the
total time equals the time to download the heavies page. On my test run, it
is <code>679.53154ms</code> for 100 pages. Down from sixteen seconds to less than a second -
an impressive result!</p>
<p>But here is a problem:</p>
<pre><code>==================
WARNING: DATA RACE
Write at 0x00c0007baf60 by goroutine 257:
  runtime.mapassign_fast64()
      /usr/local/go/src/runtime/map_fast64.go:92 +0x0
  github.com/ngalayko/talks/concurrency/examples/download/downloader/race.(*Downloader).Download.func1()
      /Users/nikitagalaiko/golang/src/github.com/ngalayko/talks/concurrency/examples/download/downloader/race/downloader.go:37 +0x8e

Previous write at 0x00c0007baf60 by goroutine 262:
  runtime.mapassign_fast64()
      /usr/local/go/src/runtime/map_fast64.go:92 +0x0
  github.com/ngalayko/talks/concurrency/examples/download/downloader/race.(*Downloader).Download.func1()
      /Users/nikitagalaiko/golang/src/github.com/ngalayko/talks/concurrency/examples/download/downloader/race/downloader.go:37 +0x8e

Goroutine 257 (running) created at:
  github.com/ngalayko/talks/concurrency/examples/download/downloader/race.(*Downloader).Download()
      /Users/nikitagalaiko/golang/src/github.com/ngalayko/talks/concurrency/examples/download/downloader/race/downloader.go:35 +0x123
  main.run()
      /Users/nikitagalaiko/golang/src/github.com/ngalayko/talks/concurrency/examples/download/cmd/download/main.go:71 +0x8e
  main.main()
      /Users/nikitagalaiko/golang/src/github.com/ngalayko/talks/concurrency/examples/download/cmd/download/main.go:56 +0x3b4

Goroutine 262 (finished) created at:
  github.com/ngalayko/talks/concurrency/examples/download/downloader/race.(*Downloader).Download()
      /Users/nikitagalaiko/golang/src/github.com/ngalayko/talks/concurrency/examples/download/downloader/race/downloader.go:35 +0x123
  main.run()
      /Users/nikitagalaiko/golang/src/github.com/ngalayko/talks/concurrency/examples/download/cmd/download/main.go:71 +0x8e
  main.main()
      /Users/nikitagalaiko/golang/src/github.com/ngalayko/talks/concurrency/examples/download/cmd/download/main.go:56 +0x3b4
==================
</code></pre><p>I&rsquo;ve built the code with <code>-race</code> flag to enable golang race detector and got a
warning about the data race. Of cource, a warning is not an error, and we can
ignore it, the result was correct: we&rsquo;ve downloaded a page for each link.</p>
<p>But why race detector does not agree?</p>
<p>First, let&rsquo;s see what lines he doesn&rsquo;t like:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">    <span class="nx">result</span><span class="p">[</span><span class="nx">u</span><span class="p">]</span> <span class="p">=</span> <span class="nx">data</span>
</code></pre></div><p>A map is a data structure that contains keys and values. All keys are unique,
and each key has an associated value with it. For the sake of the example
let&rsquo;s say that every key is associated with a particular address in the memory,
and the address is permanent.</p>
<p>So when we are updating the key&rsquo;s value, we are updating data at the same address
in the memory.</p>
<p>In our example, we have unique urls, we download each of them and place the content
to the individual memory address associated with a map key.</p>
<p>But what should happen when we write different data into the same key? If we
follow the abstractions of a map that I&rsquo;ve described above and goroutines -
light-weight threads that are running concurrently at the same time - then the
final value for the map is not determined.</p>
<p>Because what happens is that we are telling go to write some data at the same
memory address multiple times at the same time. This can cause all kinds of
problems - from the unexpected result for a programmer to data corruption. And it&rsquo;s
not a responsibility of a language to decide what does a programmer wants to see
as a result. And a result in the situation depends on uncontrollable events.</p>
<p>That&rsquo;s why go gives us a warning. It can&rsquo;t guarantee the result.</p>
<p>It doesn&rsquo;t apply only to maps. The same can happen when you share a pointer
between two goroutines. Or you are writing to the same file from two different
programmes, or maybe you are saving data from two instances of your applications to
the same database. These all are different kinds of the same problem.</p>
<blockquote>
<p>Data races happen only when you have multiple threads/goroutines/processes that
can access the same data at the same time.</p>
</blockquote>
<p>Likely, that problem was around for a while, and there is a solution to it.</p>
<blockquote>
<p>You need to make sure that only one  process has access to the same piece of
memory at a time.</p>
</blockquote>
<p>Though, there is a difference between write and read access. Reading the same
data from multiple threads is safe. The problems start only when you have
a thread that writes.</p>
<p>Golang has a few instruments to deal with data races like mutexes and channels.</p>
<p>Mutexes are used to solve exactly data race problems, here how to use them:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">Downloader</span><span class="p">)</span> <span class="nf">Download</span><span class="p">(</span><span class="nx">urls</span> <span class="o">...*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span> <span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">][]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">][]</span><span class="kt">byte</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">urls</span><span class="p">))</span>
	<span class="nx">wg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>

	<span class="nx">guard</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span><span class="p">{}</span>

	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">u</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">urls</span> <span class="p">{</span>
		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
		<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">u</span> <span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">data</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">download</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span>

			<span class="nx">guard</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
			<span class="nx">result</span><span class="p">[</span><span class="nx">u</span><span class="p">]</span> <span class="p">=</span> <span class="nx">data</span>
			<span class="nx">guard</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>

			<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="p">}(</span><span class="nx">u</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></div><p>It has two methods, <code>Lock</code> and <code>Unlock</code>. Everything between them can be accessed
only by one goroutine at a time. Others will wait for the mutex to unlock before
they can access it.</p>
<p>Channels are a bit more tricky, and can be also used to controll goroutines:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">done</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">u</span>    <span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span>
	<span class="nx">data</span> <span class="p">[]</span><span class="kt">byte</span>
	<span class="nx">err</span>  <span class="kt">error</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">Downloader</span><span class="p">)</span> <span class="nf">Download</span><span class="p">(</span><span class="nx">urls</span> <span class="o">...*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span> <span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">][]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">][]</span><span class="kt">byte</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">urls</span><span class="p">))</span>

	<span class="nx">doneChan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="o">*</span><span class="nx">done</span><span class="p">)</span>

	<span class="nx">wg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">u</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">urls</span> <span class="p">{</span>
		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
		<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">u</span> <span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">download</span><span class="p">(</span><span class="nx">u</span><span class="p">)</span>
			<span class="nx">doneChan</span> <span class="o">&lt;-</span> <span class="o">&amp;</span><span class="nx">done</span><span class="p">{</span>
				<span class="nx">u</span><span class="p">:</span>    <span class="nx">u</span><span class="p">,</span>
				<span class="nx">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">,</span>
				<span class="nx">err</span><span class="p">:</span>  <span class="nx">err</span><span class="p">,</span>
			<span class="p">}</span>
			<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
		<span class="p">}(</span><span class="nx">u</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
		<span class="nb">close</span><span class="p">(</span><span class="nx">doneChan</span><span class="p">)</span>
	<span class="p">}()</span>

	<span class="k">for</span> <span class="nx">done</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">doneChan</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">done</span><span class="p">.</span><span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error downloading %s: %s&#34;</span><span class="p">,</span> <span class="nx">done</span><span class="p">.</span><span class="nx">u</span><span class="p">,</span> <span class="nx">done</span><span class="p">.</span><span class="nx">err</span><span class="p">)</span>
		<span class="p">}</span>
		<span class="nx">result</span><span class="p">[</span><span class="nx">done</span><span class="p">.</span><span class="nx">u</span><span class="p">]</span> <span class="p">=</span> <span class="nx">done</span><span class="p">.</span><span class="nx">data</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
<span class="p">}</span>
</code></pre></div><p>Data from the multiple goroutines sent to the single goroutine via a channel and
that goroutine stores the data in the map.</p>
<h2 id="links">Links:</h2>
<ul>
<li><a href="https://github.com/ngalayko/examples/tree/master/concurrency/examples/download">example</a></li>
</ul>
]]></content></item><item><title>Optimizing a function</title><link>https://galaiko.rocks/posts/blog/optimizing-functions/</link><pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/blog/optimizing-functions/</guid><description>In the golang community slack, someone shared a link to a package used to validate Swedish personnumer. Personnumer is a swedish version of an ID, and its format is well defined:
First 6 or 8 digits is a birthrate with or without a century. Last four digits are random secret digits. The whole number satisfies the Luhn algorithm. Birthdate and secret digits can be divided with - or +. For example 19900101-0017</description><content type="html"><![CDATA[<p>In the golang community slack, someone shared a link to a package used to
validate Swedish personnumer. Personnumer is a swedish version of an ID, and its
format is well defined:</p>
<ol>
<li>First 6 or 8 digits is a birthrate with or without a century.</li>
<li>Last four digits are random secret digits.</li>
<li>The whole number satisfies the <a href="https://en.wikipedia.org/wiki/Luhn_algorithm">Luhn algorithm</a>.</li>
<li>Birthdate and secret digits can be divided with <code>-</code> or <code>+</code>.</li>
</ol>
<p>For example <code>19900101-0017</code></p>
<p>Here is the initial code of the package:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">personnummer</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;math&#34;</span>
	<span class="s">&#34;reflect&#34;</span>
	<span class="s">&#34;regexp&#34;</span>
	<span class="s">&#34;strconv&#34;</span>
	<span class="s">&#34;time&#34;</span>
<span class="p">)</span>

<span class="c1">// luhn will test if the given string is a valid luhn string.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">luhn</span><span class="p">(</span><span class="nx">str</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">sum</span> <span class="o">:=</span> <span class="mi">0</span>

	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">r</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">str</span> <span class="p">{</span>
		<span class="nx">c</span> <span class="o">:=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
		<span class="nx">v</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
		<span class="nx">v</span> <span class="o">*=</span> <span class="mi">2</span> <span class="o">-</span> <span class="p">(</span><span class="nx">i</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span>
		<span class="k">if</span> <span class="nx">v</span> <span class="p">&gt;</span> <span class="mi">9</span> <span class="p">{</span>
			<span class="nx">v</span> <span class="o">-=</span> <span class="mi">9</span>
		<span class="p">}</span>
		<span class="nx">sum</span> <span class="o">+=</span> <span class="nx">v</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nf">Ceil</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="nx">sum</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span><span class="p">)</span><span class="o">*</span><span class="mi">10</span> <span class="o">-</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">sum</span><span class="p">))</span>
<span class="p">}</span>

<span class="c1">// testDate will test if date is valid or not.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">testDate</span><span class="p">(</span><span class="nx">century</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">year</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">month</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">day</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">t</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="s">&#34;01/02/2006&#34;</span><span class="p">,</span> <span class="nx">month</span><span class="o">+</span><span class="s">&#34;/&#34;</span><span class="o">+</span><span class="nx">day</span><span class="o">+</span><span class="s">&#34;/&#34;</span><span class="o">+</span><span class="nx">century</span><span class="o">+</span><span class="nx">year</span><span class="p">)</span>

	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>

	<span class="nx">y</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">century</span> <span class="o">+</span> <span class="nx">year</span><span class="p">)</span>
	<span class="nx">m</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">month</span><span class="p">)</span>
	<span class="nx">d</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">day</span><span class="p">)</span>

	<span class="k">if</span> <span class="nx">y</span> <span class="p">&gt;</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Year</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="p">!(</span><span class="nx">t</span><span class="p">.</span><span class="nf">Year</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">y</span> <span class="o">||</span> <span class="nb">int</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nf">Month</span><span class="p">())</span> <span class="o">!=</span> <span class="nx">m</span> <span class="o">||</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Day</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">d</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// getCoOrdinationDay will return co-ordination day.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">getCoOrdinationDay</span><span class="p">(</span><span class="nx">day</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="nx">d</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">day</span><span class="p">)</span>
	<span class="nx">d</span> <span class="o">-=</span> <span class="mi">60</span>
	<span class="nx">day</span> <span class="p">=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>

	<span class="k">if</span> <span class="nx">d</span> <span class="p">&lt;</span> <span class="mi">10</span> <span class="p">{</span>
		<span class="nx">day</span> <span class="p">=</span> <span class="s">&#34;0&#34;</span> <span class="o">+</span> <span class="nx">day</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">day</span>
<span class="p">}</span>

<span class="c1">// Valid will validate Swedish social security numbers.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Valid</span><span class="p">(</span><span class="nx">str</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nf">Kind</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Int</span> <span class="o">&amp;&amp;</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nf">Kind</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">String</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>

	<span class="nx">pr</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>

	<span class="k">if</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nf">Kind</span><span class="p">()</span> <span class="o">==</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Int</span> <span class="p">{</span>
		<span class="nx">pr</span> <span class="p">=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">str</span><span class="p">.(</span><span class="kt">int</span><span class="p">))</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">pr</span> <span class="p">=</span> <span class="nx">str</span><span class="p">.(</span><span class="kt">string</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="nx">re</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">`^(\d{2}){0,1}(\d{2})(\d{2})(\d{2})([\-|\+]{0,1})?(\d{3})(\d{0,1})$`</span><span class="p">)</span>
	<span class="nx">match</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindStringSubmatch</span><span class="p">(</span><span class="nx">pr</span><span class="p">)</span>

	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">match</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>

	<span class="nx">century</span> <span class="o">:=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
	<span class="nx">year</span> <span class="o">:=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
	<span class="nx">month</span> <span class="o">:=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
	<span class="nx">day</span> <span class="o">:=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
	<span class="nx">num</span> <span class="o">:=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span>
	<span class="nx">check</span> <span class="o">:=</span> <span class="nx">match</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span>

	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">century</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="nx">yearNow</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Year</span><span class="p">()</span>
		<span class="nx">years</span> <span class="o">:=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="nx">yearNow</span><span class="p">,</span> <span class="nx">yearNow</span> <span class="o">-</span> <span class="mi">100</span><span class="p">,</span> <span class="nx">yearNow</span> <span class="o">-</span> <span class="mi">150</span><span class="p">}</span>

		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">yi</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">years</span> <span class="p">{</span>
			<span class="nx">ys</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">yi</span><span class="p">)</span>

			<span class="k">if</span> <span class="nf">Valid</span><span class="p">(</span><span class="nx">ys</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="nx">pr</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">return</span> <span class="kc">true</span>
			<span class="p">}</span>
		<span class="p">}</span>

		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">year</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span> <span class="p">{</span>
		<span class="nx">year</span> <span class="p">=</span> <span class="nx">year</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span>
	<span class="p">}</span>

	<span class="nx">c</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">check</span><span class="p">)</span>

	<span class="nx">valid</span> <span class="o">:=</span> <span class="nf">luhn</span><span class="p">(</span><span class="nx">year</span><span class="o">+</span><span class="nx">month</span><span class="o">+</span><span class="nx">day</span><span class="o">+</span><span class="nx">num</span><span class="p">)</span> <span class="o">==</span> <span class="nx">c</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">check</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span>

	<span class="k">if</span> <span class="nx">valid</span> <span class="o">&amp;&amp;</span> <span class="nf">testDate</span><span class="p">(</span><span class="nx">century</span><span class="p">,</span> <span class="nx">year</span><span class="p">,</span> <span class="nx">month</span><span class="p">,</span> <span class="nx">day</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">valid</span>
	<span class="p">}</span>

	<span class="nx">day</span> <span class="p">=</span> <span class="nf">getCoOrdinationDay</span><span class="p">(</span><span class="nx">day</span><span class="p">)</span>

	<span class="k">return</span> <span class="nx">valid</span> <span class="o">&amp;&amp;</span> <span class="nf">testDate</span><span class="p">(</span><span class="nx">century</span><span class="p">,</span> <span class="nx">year</span><span class="p">,</span> <span class="nx">month</span><span class="p">,</span> <span class="nx">day</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>Let&rsquo;s add a benchmark:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">BenchmarkValid</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nf">Valid</span><span class="p">(</span><span class="s">&#34;19900101-0017&#34;</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>Results:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ go <span class="nb">test</span> -bench<span class="o">=</span>BenchmarkValid$ -benchmem
goos: darwin
goarch: amd64
pkg: github.com/ngalayko/go
BenchmarkValid-4  <span class="m">100000</span>  <span class="m">18498</span> ns/op  <span class="m">54576</span> B/op  <span class="m">118</span> allocs/op
PASS
</code></pre></div><p>That&rsquo;s a lot of resources to validate a string using four simple rules.</p>
<p>There are several problems in the code. I am going to remove it one by one:</p>
<h2 id="regexp-package">Regexp package</h2>
<p>The most popular way to optimize functions in go is to move the regexp compilation
out from a function:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">
<span class="kd">var</span> <span class="p">(</span>
	<span class="nx">re</span> <span class="p">=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">MustCompile</span><span class="p">(</span><span class="s">`^(\d{2}){0,1}(\d{2})(\d{2})(\d{2})([\-|\+]{0,1})?(\d{3})(\d{0,1})$`</span><span class="p">)</span>
<span class="p">)</span>

<span class="c1">// Valid will validate Swedish social security numbers.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Valid</span><span class="p">(</span><span class="nx">str</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="c1">//...
</span><span class="c1"></span>
	<span class="nx">match</span> <span class="o">:=</span> <span class="nx">re</span><span class="p">.</span><span class="nf">FindStringSubmatch</span><span class="p">(</span><span class="nx">pr</span><span class="p">)</span>

	<span class="c1">//...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><p>Results are not surprising:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ go <span class="nb">test</span> -bench<span class="o">=</span>BenchmarkValid$ -benchmem
goos: darwin
goarch: amd64
pkg: github.com/ngalayko/go
BenchmarkValid-4  <span class="m">1000000</span>  <span class="m">1301</span> ns/op  <span class="m">309</span> B/op  <span class="m">13</span> allocs/op
PASS
</code></pre></div><h2 id="reflect-package">Reflect package</h2>
<p>Reflection is generally slow and is not made to be used in such cases. Here it
is used to check if the input type in <code>int</code> or <code>string</code>. Let&rsquo;s assume we actually need
a function that accepts an interface, and not just a string.</p>
<p>To check the type of an interface you don&rsquo;t need a reflect package. You can always
switch on an interface type:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Valid will validate Swedish social security numbers.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Valid</span><span class="p">(</span><span class="nx">i</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">switch</span> <span class="nx">v</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">case</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int32</span><span class="p">,</span> <span class="kt">int64</span><span class="p">,</span> <span class="kt">uint</span><span class="p">,</span> <span class="kt">uint32</span><span class="p">,</span> <span class="kt">uint64</span><span class="p">:</span>
		<span class="k">return</span> <span class="nf">ValidString</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprint</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span> 
	<span class="k">case</span> <span class="kt">string</span><span class="p">:</span>
		<span class="k">return</span> <span class="nf">ValidString</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
	<span class="k">default</span><span class="p">:</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ValidString will validate Swedish social security numbers.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ValidString</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><p>Results are pretty much the same. I think it&rsquo;s because of some compiler optimizations
where <code>switch v.(type)</code> is syntax sugar for <code>reflect.TypeOf(v)</code>, plus undercover all
objects know what types they are even when you use them as an <code>interface{}</code>.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ go <span class="nb">test</span> -bench<span class="o">=</span>BenchmarkValid$ -benchmem
goos: darwin
goarch: amd64
pkg: github.com/ngalayko/go
BenchmarkValid-4  <span class="m">1000000</span>  <span class="m">1305</span> ns/op  <span class="m">309</span> B/op  <span class="m">13</span> allocs/op
PASS
</code></pre></div><h2 id="regexp-package-again">Regexp package again</h2>
<p>Why do we even need a regexp package here? To validate that string contains only
digits and <code>-</code> or <code>-</code> regexp is an overkill.</p>
<p>First, we clean out everything except digits from a string and check it&rsquo;s length
because we know what that length should be (6+4 or 8+4).</p>
<p>To check if a character is a digit, it&rsquo;s enough to make sure that it&rsquo;s greater than
<code>'0'</code> and less than <code>'9'</code>, because all digits have sequential codes in the
(ASCII table)[http://www.asciitable.com/].</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">ValidString</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">cleanNumber</span> <span class="o">:=</span> <span class="s">&#34;&#34;</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">c</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span> <span class="p">{</span> <span class="c1">// `+` is allowed, but we don&#39;t need it.
</span><span class="c1"></span>			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">c</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span> <span class="p">{</span> <span class="c1">// `-` is allowed, but we don&#39;t need it.
</span><span class="c1"></span>		    <span class="k">continue</span>
        <span class="p">}</span>

		<span class="k">if</span> <span class="nx">c</span> <span class="p">&gt;</span> <span class="sc">&#39;9&#39;</span> <span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">c</span> <span class="p">&lt;</span> <span class="sc">&#39;0&#39;</span> <span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span>
		<span class="p">}</span>

		<span class="nx">cleanNumber</span> <span class="o">+=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
	<span class="p">}</span>
    <span class="c1">//...
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><p>And once we have a string that has only digits, it&rsquo;s easy to get all parts of it:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go">	<span class="c1">//...
</span><span class="c1"></span>
    <span class="kd">var</span> <span class="p">(</span>
		<span class="nx">century</span> <span class="kt">string</span>
		<span class="nx">year</span>    <span class="kt">string</span>
		<span class="nx">month</span>   <span class="kt">string</span>
		<span class="nx">day</span>     <span class="kt">string</span>
		<span class="nx">num</span>     <span class="kt">string</span>
		<span class="nx">check</span>   <span class="kt">string</span>
	<span class="p">)</span>

	<span class="k">switch</span> <span class="nb">len</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">case</span> <span class="mi">10</span><span class="p">:</span>
		<span class="nx">year</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span>
		<span class="nx">month</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>
		<span class="nx">day</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">6</span><span class="p">])</span>
		<span class="nx">num</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">6</span><span class="p">:</span><span class="mi">9</span><span class="p">])</span>
		<span class="nx">check</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">9</span><span class="p">:])</span>
	<span class="k">case</span> <span class="mi">12</span><span class="p">:</span>
		<span class="nx">century</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span>
		<span class="nx">year</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>
		<span class="nx">month</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">6</span><span class="p">])</span>
		<span class="nx">day</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">6</span><span class="p">:</span><span class="mi">8</span><span class="p">])</span>
		<span class="nx">num</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">11</span><span class="p">])</span>
		<span class="nx">check</span> <span class="p">=</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">11</span><span class="p">:])</span>
	<span class="k">default</span><span class="p">:</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>

    <span class="c1">//...
</span></code></pre></div><p>Results are a bit better:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ go <span class="nb">test</span> -bench<span class="o">=</span>BenchmarkValid$ -benchmem
goos: darwin
goarch: amd64
pkg: github.com/ngalayko/go
BenchmarkValid-4  <span class="m">1000000</span>  <span class="m">1302</span> ns/op  <span class="m">208</span> B/op  <span class="m">34</span> allocs/op
PASS
</code></pre></div><h2 id="time-package">Time package</h2>
<p>Standard time package is great, but what we need here is just simple validation
of a date:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">monthDays</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span>
	<span class="mi">1</span><span class="p">:</span>  <span class="mi">31</span><span class="p">,</span>
	<span class="mi">3</span><span class="p">:</span>  <span class="mi">31</span><span class="p">,</span>
	<span class="mi">4</span><span class="p">:</span>  <span class="mi">30</span><span class="p">,</span>
	<span class="mi">5</span><span class="p">:</span>  <span class="mi">31</span><span class="p">,</span>
	<span class="mi">6</span><span class="p">:</span>  <span class="mi">30</span><span class="p">,</span>
	<span class="mi">7</span><span class="p">:</span>  <span class="mi">31</span><span class="p">,</span>
	<span class="mi">8</span><span class="p">:</span>  <span class="mi">31</span><span class="p">,</span>
	<span class="mi">9</span><span class="p">:</span>  <span class="mi">30</span><span class="p">,</span>
	<span class="mi">10</span><span class="p">:</span> <span class="mi">31</span><span class="p">,</span>
	<span class="mi">11</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
	<span class="mi">12</span><span class="p">:</span> <span class="mi">31</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// testDate will test if date is valid or not.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">testDate</span><span class="p">(</span><span class="nx">century</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">year</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">month</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">day</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">y</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">century</span> <span class="o">+</span> <span class="nx">year</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>
	<span class="nx">m</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">month</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>
	<span class="nx">d</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">day</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>

	<span class="k">if</span> <span class="nx">m</span> <span class="o">!=</span> <span class="mi">2</span> <span class="p">{</span>
		<span class="nx">days</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">monthDays</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="nx">d</span> <span class="o">&lt;=</span> <span class="nx">days</span>
	<span class="p">}</span>

	<span class="nx">leapYear</span> <span class="o">:=</span> <span class="nx">y</span><span class="o">%</span><span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">y</span><span class="o">%</span><span class="mi">100</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">y</span><span class="o">%</span><span class="mi">400</span> <span class="o">==</span> <span class="mi">0</span>

	<span class="k">if</span> <span class="nx">leapYear</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">d</span> <span class="o">&lt;=</span> <span class="mi">29</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">d</span> <span class="o">&lt;=</span> <span class="mi">28</span>
<span class="p">}</span>
</code></pre></div><p>Benchmark:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ go <span class="nb">test</span> -bench<span class="o">=</span>BenchmarkValid$ -benchmem
goos: darwin
goarch: amd64
pkg: github.com/ngalayko/go
BenchmarkValid-4   <span class="m">2000000</span>  <span class="m">901</span> ns/op  <span class="m">192</span> B/op  <span class="m">33</span> allocs/op
PASS
</code></pre></div><h2 id="strings">Strings</h2>
<p>Notice that there are still 33 allocations per function call. Where do they come
from? It&rsquo;s because we use <code>string</code> type all the time, <code>string</code> is the same thing
as a <code>[]byte</code>, but immutable. So every time we call <code>cleanNumber += string(c)</code>,
allocation happens. It&rsquo;s impossible to change the string, so new the string is allocated,
and both strings are copies there.</p>
<p>Let&rsquo;s remove <code>string</code> usage:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">personnummer</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">const</span> <span class="p">(</span>
	<span class="nx">lengthWithoutCentury</span> <span class="p">=</span> <span class="mi">10</span>
	<span class="nx">lengthWithCentury</span>    <span class="p">=</span> <span class="mi">12</span>
<span class="p">)</span>

<span class="c1">// ValidateStrings validate Swedish social security numbers.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ValidString</span><span class="p">(</span><span class="nx">in</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">cleanNumber</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">in</span><span class="p">))</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">in</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">c</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span> <span class="p">{</span>
			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">c</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span> <span class="p">{</span>
			<span class="k">continue</span>
		<span class="p">}</span>

		<span class="k">if</span> <span class="nx">c</span> <span class="p">&gt;</span> <span class="sc">&#39;9&#39;</span> <span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">c</span> <span class="p">&lt;</span> <span class="sc">&#39;0&#39;</span> <span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span>
		<span class="p">}</span>

		<span class="nx">cleanNumber</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">,</span> <span class="nb">byte</span><span class="p">(</span><span class="nx">c</span><span class="p">))</span>
	<span class="p">}</span>

	<span class="k">switch</span> <span class="nb">len</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">case</span> <span class="nx">lengthWithCentury</span><span class="p">:</span>
		<span class="k">if</span> <span class="p">!</span><span class="nf">luhn</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">2</span><span class="p">:])</span> <span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span>
		<span class="p">}</span>

		<span class="nx">dateBytes</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[:</span><span class="mi">6</span><span class="p">],</span> <span class="nf">getCoOrdinationDay</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">6</span><span class="p">:</span><span class="mi">8</span><span class="p">])</span><span class="o">...</span><span class="p">)</span>
		<span class="k">return</span> <span class="nf">validateTime</span><span class="p">(</span><span class="nx">dateBytes</span><span class="p">)</span>
	<span class="k">case</span> <span class="nx">lengthWithoutCentury</span><span class="p">:</span>
		<span class="k">if</span> <span class="p">!</span><span class="nf">luhn</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span>
		<span class="p">}</span>

		<span class="nx">dateBytes</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[:</span><span class="mi">4</span><span class="p">],</span> <span class="nf">getCoOrdinationDay</span><span class="p">(</span><span class="nx">cleanNumber</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">6</span><span class="p">])</span><span class="o">...</span><span class="p">)</span>
		<span class="k">return</span> <span class="nf">validateTime</span><span class="p">(</span><span class="nx">dateBytes</span><span class="p">)</span>
	<span class="k">default</span><span class="p">:</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">monthDays</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span>
	<span class="mi">1</span><span class="p">:</span>  <span class="mi">31</span><span class="p">,</span>
	<span class="mi">3</span><span class="p">:</span>  <span class="mi">31</span><span class="p">,</span>
	<span class="mi">4</span><span class="p">:</span>  <span class="mi">30</span><span class="p">,</span>
	<span class="mi">5</span><span class="p">:</span>  <span class="mi">31</span><span class="p">,</span>
	<span class="mi">6</span><span class="p">:</span>  <span class="mi">30</span><span class="p">,</span>
	<span class="mi">7</span><span class="p">:</span>  <span class="mi">31</span><span class="p">,</span>
	<span class="mi">8</span><span class="p">:</span>  <span class="mi">31</span><span class="p">,</span>
	<span class="mi">9</span><span class="p">:</span>  <span class="mi">30</span><span class="p">,</span>
	<span class="mi">10</span><span class="p">:</span> <span class="mi">31</span><span class="p">,</span>
	<span class="mi">11</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
	<span class="mi">12</span><span class="p">:</span> <span class="mi">31</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1">// input time without centry.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">validateTime</span><span class="p">(</span><span class="nx">time</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">length</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">time</span><span class="p">)</span>

	<span class="nx">date</span> <span class="o">:=</span> <span class="nf">charsToDigit</span><span class="p">(</span><span class="nx">time</span><span class="p">[</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span> <span class="p">:</span> <span class="nx">length</span><span class="p">])</span>
	<span class="nx">month</span> <span class="o">:=</span> <span class="nf">charsToDigit</span><span class="p">(</span><span class="nx">time</span><span class="p">[</span><span class="nx">length</span><span class="o">-</span><span class="mi">4</span> <span class="p">:</span> <span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>

	<span class="k">if</span> <span class="nx">month</span> <span class="o">!=</span> <span class="mi">2</span> <span class="p">{</span>
		<span class="nx">days</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">monthDays</span><span class="p">[</span><span class="nx">month</span><span class="p">]</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
			<span class="k">return</span> <span class="kc">false</span>
		<span class="p">}</span>
		<span class="k">return</span> <span class="nx">date</span> <span class="o">&lt;=</span> <span class="nx">days</span>
	<span class="p">}</span>

	<span class="nx">year</span> <span class="o">:=</span> <span class="nf">charsToDigit</span><span class="p">(</span><span class="nx">time</span><span class="p">[:</span><span class="nx">length</span><span class="o">-</span><span class="mi">4</span><span class="p">])</span>

	<span class="nx">leapYear</span> <span class="o">:=</span> <span class="nx">year</span><span class="o">%</span><span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">year</span><span class="o">%</span><span class="mi">100</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">year</span><span class="o">%</span><span class="mi">400</span> <span class="o">==</span> <span class="mi">0</span>

	<span class="k">if</span> <span class="nx">leapYear</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">date</span> <span class="o">&lt;=</span> <span class="mi">29</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">date</span> <span class="o">&lt;=</span> <span class="mi">28</span>
<span class="p">}</span>

<span class="c1">// Valid will validate Swedish social security numbers.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Valid</span><span class="p">(</span><span class="nx">i</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="k">switch</span> <span class="nx">v</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">case</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int32</span><span class="p">,</span> <span class="kt">int64</span><span class="p">,</span> <span class="kt">uint</span><span class="p">,</span> <span class="kt">uint32</span><span class="p">,</span> <span class="kt">uint64</span><span class="p">:</span>
		<span class="k">return</span> <span class="nf">ValidString</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprint</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
	<span class="k">case</span> <span class="kt">string</span><span class="p">:</span>
		<span class="k">return</span> <span class="nf">ValidString</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
	<span class="k">default</span><span class="p">:</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">rule3</span> <span class="p">=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">}</span>

<span class="c1">// luhn will test if the given string is a valid luhn string.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">luhn</span><span class="p">(</span><span class="nx">s</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">odd</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span>

	<span class="kd">var</span> <span class="nx">sum</span> <span class="kt">int</span>

	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">i</span><span class="o">&amp;</span><span class="mi">1</span> <span class="o">==</span> <span class="nx">odd</span> <span class="p">{</span>
			<span class="nx">sum</span> <span class="o">+=</span> <span class="nx">rule3</span><span class="p">[</span><span class="nx">c</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">]</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="nx">sum</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">c</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">sum</span><span class="o">%</span><span class="mi">10</span> <span class="o">==</span> <span class="mi">0</span>
<span class="p">}</span>

<span class="c1">// getCoOrdinationDay will return co-ordination day.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">getCoOrdinationDay</span><span class="p">(</span><span class="nx">day</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">[]</span><span class="kt">byte</span> <span class="p">{</span>
	<span class="nx">d</span> <span class="o">:=</span> <span class="nf">charsToDigit</span><span class="p">(</span><span class="nx">day</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">d</span> <span class="p">&lt;</span> <span class="mi">60</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">day</span>
	<span class="p">}</span>

	<span class="nx">d</span> <span class="o">-=</span> <span class="mi">60</span>

	<span class="k">if</span> <span class="nx">d</span> <span class="p">&lt;</span> <span class="mi">10</span> <span class="p">{</span>
		<span class="k">return</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">{</span><span class="sc">&#39;0&#39;</span><span class="p">,</span> <span class="nb">byte</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">{</span>
		<span class="nb">byte</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">/</span><span class="mi">10</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="p">,</span>
		<span class="nb">byte</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">%</span><span class="mi">10</span> <span class="o">+</span> <span class="sc">&#39;0&#39;</span><span class="p">,</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// charsToDigit converts char bytes to a digit
</span><span class="c1">// example: [&#39;1&#39;, &#39;1&#39;] =&gt; 11
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">charsToDigit</span><span class="p">(</span><span class="nx">chars</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">l</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">chars</span><span class="p">)</span>
	<span class="nx">r</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">chars</span> <span class="p">{</span>
		<span class="nx">p</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">((</span><span class="nx">c</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">))</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">l</span><span class="o">-</span><span class="nx">i</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">p</span> <span class="o">*=</span> <span class="mi">10</span>
		<span class="p">}</span>
		<span class="nx">r</span> <span class="o">+=</span> <span class="nx">p</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">r</span>
<span class="p">}</span>
</code></pre></div><p>Final result:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ go <span class="nb">test</span> -bench<span class="o">=</span>BenchmarkValid$ -benchmem
goos: darwin
goarch: amd64
pkg: github.com/ngalayko/go
BenchmarkValid-4  <span class="m">20000000</span>  94.0 ns/op  <span class="m">16</span> B/op  <span class="m">1</span> allocs/op
PASS
</code></pre></div><p><img src="/media/optimization-n.jpg" alt="Optimizaion-N"></p>
<p><img src="/media/optimization-bytes.jpg" alt="Optimizaion-bytes"></p>
<p><img src="/media/optimization-allocs.jpg" alt="Optimizaion-allocs"></p>
<p><img src="/media/optimization-ns.jpg" alt="Optimizaion-ns"></p>
<p>If you have an idea how to improve it more, please share.</p>
]]></content></item><item><title>Selfhosted RaspberryPI based Docker Swarm Cluster</title><link>https://galaiko.rocks/posts/blog/cluster/</link><pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/blog/cluster/</guid><description>Introduction I am renting virtual servers for a long time now to host different personal projects, including this website. I tried all of them: AWS, Google Cloud, DigitalOcean , Azure, and I was entirely satisfied with them until two weeks ago. Two weeks ago I came across the [article](https://medium.com/@bossjones/how-i-setup-a-raspberry -pi-3-cluster-using-the-new-docker-swarm-mode-in-29-minutes-aa0e4f3b1768) where the guy described how easy is to set up a RaspberryPI cluster powered by Docker Swarm. This idea seemed exciting to me, so I ordered all the equipment and spent some time to set it up and move most of the services from DigitalOcean servers to my living room.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I am renting virtual servers for a long time now to host different personal
projects, including this website. I tried all of them: AWS, Google Cloud, DigitalOcean
, Azure, and I was entirely satisfied with them until two weeks ago. Two weeks
ago I came across the [article](<a href="https://medium.com/@bossjones/how-i-setup-a-raspberry">https://medium.com/@bossjones/how-i-setup-a-raspberry</a>
-pi-3-cluster-using-the-new-docker-swarm-mode-in-29-minutes-aa0e4f3b1768) where
the guy described how easy is to set up a RaspberryPI cluster powered by
Docker Swarm. This idea seemed exciting to me, so I ordered all the equipment
and spent some time to set it up and move most of the services from
DigitalOcean servers to my living room. During that time I faced a lot of
unexpected difficulties and read most of the articles where people described
how to set up the Docker Swarm cluster, but none of them completely covered everything I wanted to do, so here is another one.</p>
<p>Hardware Used:</p>
<ul>
<li>4 x <a href="https://www.amazon.de/gp/product/B06XFSZGCC/ref=oh_aui_detailpage_o00_s00?ie=UTF8&amp;psc=1">microSDHC 32 Pro Class 10</a></li>
<li>4 x <a href="https://www.amazon.de/gp/product/B07F71BWZT/ref=oh_aui_detailpage_o00_s00?ie=UTF8&amp;psc=1">Layer case for Raspberry Pi</a></li>
<li>4 x <a href="https://www.amazon.de/gp/product/B01A7BVDES/ref=oh_aui_detailpage_o00_s01?ie=UTF8&amp;psc=1">microUSB cable</a></li>
<li>5 x <a href="https://www.amazon.de/gp/product/B0046ZAK0K/ref=oh_aui_detailpage_o00_s01?ie=UTF8&amp;psc=1">Gigabit Ethernet patch cable</a></li>
<li>1 x <a href="https://www.amazon.de/gp/product/B00PTLSH9G/ref=oh_aui_detailpage_o00_s02?ie=UTF8&amp;psc=1">USB Charger for 6 ports</a></li>
<li>4 x <a href="https://www.amazon.de/gp/product/B07BFH96M3/ref=oh_aui_detailpage_o00_s02?ie=UTF8&amp;psc=1">Raspberry PI 3 Model B+</a></li>
<li>1 x <a href="https://www.amazon.de/gp/product/B000BCC0LO/ref=oh_aui_detailpage_o00_s02?ie=UTF8&amp;psc=1">8-Port Gigabit Switch</a></li>
</ul>
<p><img src="/media/cluster.jpg" alt="Cluster"></p>
<p>Technologies used:</p>
<ul>
<li>HypriotOS - operating system for Raspberry Pi with preinstalled docker</li>
<li>Docker Swarm - container orcestrator</li>
<li>Minio - s3 compatible object storage</li>
<li>rexray/s3fs - docker volume driver for s3 system</li>
<li>s3fs (v1.8.4) - itself</li>
<li>Prometheus / Grafana - for monitoring</li>
<li>Traefik - reverse proxy and load balancer</li>
</ul>
<h2 id="software">Software</h2>
<h3 id="arm">ARM</h3>
<p>First of all, you should be aware that ARM architecture that Raspberry PI is
based on is a pain in the ass. Almost none of Docker images that you find are
going to work as you would expect, so that be ready to rewrite docker files and recompile binaries.
What really helps here is the <code> --resolve-image never</code> flag for deployment. Because
sometimes even if the image uses ARM compatible architecture, docker think
that it&rsquo;s amd64. You can find an example of a simple deployment script <a href="./scripts/deploy_arm32v7.sh">here</a>
Here is the list of images I found good as a base:</p>
<ul>
<li><a href="https://hub.docker.com/r/apcheamitru/arm32v7-alpine/">apcheamitru/arm32v7-alpine</a> - for alpine based images. Use this one when possible, it&rsquo;s much smaller.</li>
<li><a href="https://hub.docker.com/r/arm32v7/debian/">arm32v7/debian:7.11-slim</a> - for Debian based images and when you are can&rsquo;t/lazy to use alpine.</li>
</ul>
<h3 id="docker-swarm">Docker Swarm</h3>
<p>Initially, I planned to use Kubernates for the cluster orchestrator, but
change that for Docker Swarm, because it turns out much more straightforward
to set up. However, it has some disadvantages according to   DevOps experts on
the Internet, one that I found is that if you want to have shared storage for
your volumes across the cluster, you are going to waste a week to find a solution
that works on ARM and it will just cause more problems, because it&rsquo;s super slow.</p>
<h3 id="traefik">Traefik</h3>
<p>For routing inside of the cluster, I use Traefik - a modern reverse proxy. What
I liked about it has an integration with the docker API, so you don&rsquo;t need to
describe all of your routes in a configuration file, you just put all
containers in the same network and label them in the same compose file where
you describe the container.</p>
<h3 id="prometheus-grafana">Prometheus, Grafana</h3>
<p>The first thing you want to do after you have a working cluster is monitoring, so
you know how much resources are in use and what&rsquo;s the best way to distribute
them across the cluster.</p>
<p>As a source of data for the dashboards I use:</p>
<ul>
<li>node-exporter
This provides the necessary node information like overall usage of RAM / SPU / SSD
, disk read/write rate, network activity, etc.</li>
<li>arm-exporter
I use this to have information about Pi&rsquo;s temperature. It has a strict
correlation with CPU usage, but you want to make sure it&rsquo;s never higher than 50C.</li>
<li>cadvisor
It provides information from containers point of view. How much of the
allocated resources are in use by a service. For example, I have a limit of
256MB of RAM for Prometheus, so it goes down every day or so because OOM
killer restarts it once the RAM usage crosses the limit. Thanks to this
exporter I am aware of this and can increase the limit or do nothing (I do nothing)</li>
</ul>
<h3 id="minio">Minio</h3>
<p>After I configured the basic cluster, I faced a serious problem. Every time I update
the cluster, and Docker Swarm decides to move a service to another node, your
persistent data is lost, because by default Swarm supports only local volumes, it
means that volume is mounter to the current node and you have to bother
yourself syncing it between multiple nodes if you need to.</p>
<p>To have a shared volume, I have chosen <a href="https://minio.io/">Minio</a> cluster and <a href="https://rexray.io/">rexray</a> as an s3fs volume driver.
<a href="https://github.com/s3fs-fuse/s3fs-fuse">s3fs</a> is a file system from Amazon
that allows you to mount a bucket from s3 to the disk and store data there.
Rexray allows you to use s3fs to create volumes. However, since I wanted to go
full self-hosted,  Amazon is not an option. That&rsquo;s why I use minio since it
has fully compatible API with Amazon&rsquo;s s3.
To configure all of that I had to build the Minio image because the one in
their docker registry is one year old and didn&rsquo;t work because it wasn&rsquo;t fully
UNIX compatible (mkdir didn&rsquo;t work). To make it work, you need an s3fs version
higher than 1.82, and latest fuse version that you need to compile yourself. Also
, you need a rexray plugin built for the ARM platform.
You can find all of the images in <a href="https://hub.docker.com/u/ngalayko/">my docker hub</a>.
However, I should warn you that when you manage to set this up, you find out
that write speed is extremely slow and the solution for persistence is to bind
a service to a node using placement constraints.</p>
<h2 id="migration">Migration</h2>
<p>I used to deploy all services using docker compose. You can read about it <a href="https://galaiko.rocks/posts/docker-compose-server-manegement/">here</a>.
The first step was to rewrite all compose files to version 3, so I can reuse
them for Swarm deployment.
The second step is to set up a cluster and expose it to the Internet.
To avoid downtime, I created a test domain that was a base domain for all
cluster services while I was testing it.
When cluster was ready for &ldquo;production&rdquo;, I changed DNS settings and pointer
the real domain to cluster IP, so after DNS cache was updated, all users were
migrated to the new cluster without noticing (let&rsquo;s pretend I have more than
20 daily visitors and they care about this blog).</p>
<p>Next plans are to set up DNS over HTTPS  and VPN over HTTPS on the same cluster.</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="https://github.com/ngalayko/server">github repo</a></li>
</ul>
]]></content></item><item><title>Daily Coding Problem #23</title><link>https://galaiko.rocks/posts/dcp/maze/</link><pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/dcp/maze/</guid><description>Problem You are given an M by N matrix consisting of booleans that represents a board. Each True boolean represents a wall. Each False boolean represents a tile you can walk on.
Given this matrix, a start coordinate, and an end coordinate, return the minimum number of steps required to reach the end coordinate from the start. If there is no possible path, then return null. You can move up, left, down, and right.</description><content type="html"><![CDATA[<p><img src="/media/maze.jpg" alt="maze"></p>
<h1 id="problem">Problem</h1>
<p>You are given an M by N matrix consisting of booleans that represents a board.
Each True boolean represents a wall. Each False boolean represents a tile you can walk on.</p>
<p>Given this matrix, a start coordinate, and an end coordinate, return the
minimum number of steps required to reach the end coordinate from the start.
If there is no possible path, then return null. You can move up, left, down,
and right. You cannot move through walls. You cannot wrap around the edges of the board.</p>
<p>For example, given the following board:</p>
<pre><code>[
    [f, f, f, f],
    [t, t, f, t],
    [f, f, f, f],
    [f, f, f, f],
]
</code></pre><p>and start = (3, 0) (bottom left) and end = (0, 0) (top left), the minimum number
of steps required to reach the end is 7, since we would need to go through,
(1, 2) because there is a wall everywhere else on the second row.</p>
<h1 id="solution">Solution</h1>
<p>It is a new type of problems I faced. I remember, I solved some during
university, but it was pretty hard to come up with the solution right away.</p>
<p>I googled basic types of maze solving algorithms, and it looks like
<a href="https://en.wikipedia.org/wiki/Lee_algorithm">Lee algorithm</a> will be a pretty
good choice in most of the <code>shortest path</code> problems since at the end of the
day a number of different paths in a maze makes a tree.</p>
<p>The idea is deadly simple:</p>
<ol>
<li>go to start cell, mark it <code>0</code>.</li>
<li>mark all neighbors as <code>+1</code>. It is a distance to the starting cell</li>
<li>make the same for each of the neighbors</li>
</ol>
<p>By running this algorithm for each cell, we will get the number of steps it
takes to get to any other point from the start. Of course, we should ignore
walls and previously marked cells on each iteration.</p>
<p>This is a basic solution and can be optimized for a given problem.
For example, we can stop our recursive calls once we meet finish cell.</p>
<h1 id="code">Code</h1>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// the maze is a matrix that represents a maze.
</span><span class="c1">// all cells have value 0, and all walls have value 1.
</span><span class="c1">// start and finish are arrays of 2 elements, [i,j] of the cells.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">maze</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">start</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">finish</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>                                                                                                               
        <span class="c1">// mark start cell is -1
</span><span class="c1"></span>        <span class="nx">maze</span><span class="p">[</span><span class="nx">start</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="nx">start</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="p">=</span> <span class="o">-</span><span class="mi">1</span>

        <span class="c1">// mark all cells starting from start recursively
</span><span class="c1"></span>        <span class="nf">mark</span><span class="p">(</span><span class="nx">maze</span><span class="p">,</span> <span class="nx">start</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

        <span class="c1">// return value of a finish cell
</span><span class="c1"></span>        <span class="k">return</span> <span class="nx">maze</span><span class="p">[</span><span class="nx">finish</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="nx">finish</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span>
<span class="p">}</span>

<span class="c1">// pos is a structure to hold cell coordinates, 
</span><span class="c1">// because []int can&#39;t ba used as a map key ¯\_(ツ)_/¯
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">pos</span> <span class="kd">struct</span> <span class="p">{</span>
        <span class="nx">i</span> <span class="kt">int</span>
        <span class="nx">j</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="c1">// mark marks all neighbors of a given cell with n+1
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">mark</span><span class="p">(</span><span class="nx">maze</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">point</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="o">:=</span> <span class="nx">point</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">point</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

        <span class="nx">neighbors</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="nx">pos</span><span class="p">]</span><span class="kt">bool</span><span class="p">{</span>
                <span class="nx">pos</span><span class="p">{</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="p">}:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="nx">pos</span><span class="p">{</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">j</span><span class="p">}:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="nx">pos</span><span class="p">{</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">}:</span> <span class="kc">false</span><span class="p">,</span>
                <span class="nx">pos</span><span class="p">{</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="k">for</span> <span class="nx">p</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">neighbors</span> <span class="p">{</span>
                <span class="nx">neighbors</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span> <span class="p">=</span> <span class="nf">markP</span><span class="p">(</span><span class="nx">maze</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">i</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">j</span><span class="p">,</span> <span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="k">for</span> <span class="nx">p</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">neighbors</span> <span class="p">{</span>
                <span class="k">if</span> <span class="nx">ok</span> <span class="p">{</span>
                        <span class="nf">mark</span><span class="p">(</span><span class="nx">maze</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="nx">p</span><span class="p">.</span><span class="nx">i</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">j</span><span class="p">},</span> <span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
                <span class="p">}</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// markP used to mark maze[i][j] with given n if exists and not marked.
</span><span class="c1">// returns true if it was marked, otherwise false.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">markP</span><span class="p">(</span><span class="nx">maze</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">maze</span><span class="p">)</span> <span class="o">||</span> <span class="nx">j</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">maze</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="nx">maze</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">false</span>
        <span class="p">}</span>

        <span class="nx">maze</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">n</span>
        <span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span>
</code></pre></div><h1 id="links">Links</h1>
<p><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-09-01">github</a></p>
]]></content></item><item><title>Internet privacy starter pack</title><link>https://galaiko.rocks/posts/blog/privacy/</link><pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/blog/privacy/</guid><description>About a month ago I began using some systems to protect my security on the internet a bit more than nothing.
PiHole It started when someone shared a link to the PiHole on Twitter. It is a self-hosted DNS service that is designed for RaspberryPi for blocking advertisements and trackers on the DNS level.
Turns out, about 20% of queries I make are blocked, and it doesn&amp;rsquo;t hurt daily usage at all.</description><content type="html"><![CDATA[<p>About a month ago I began using some systems to protect my security on the internet a bit more than nothing.</p>
<h2 id="pihole">PiHole</h2>
<p>It started when someone shared a link to the <a href="https://pi-hole.net/">PiHole</a> on Twitter.
It is a self-hosted DNS service that is designed for RaspberryPi for
blocking advertisements and trackers on the DNS level.</p>
<p>Turns out, about 20% of queries I make are blocked,
and it doesn&rsquo;t hurt daily usage at all. Instead,
now I have nice stats of a website I visit and handy tools to block/whitelist
some of them.</p>
<p><img src="/media/pihole.jpg" alt="Pihole"></p>
<p>You can install it directly on your router, on every device that you use.
For MacBook and AppleTV I changed DNS settings to use my custom IP address,
for iPhone, I found <a href="https://www.dnsoverride.com/">this app</a> that can change DNS for all requests, even when you use cellular.
If you want to try it, the address is the same as the IP of this website <code>167.99.219.223</code></p>
<h2 id="matomo">Matomo</h2>
<p><img src="/media/matomo.jpg" alt="natomo"></p>
<p>After enabling PiHole, Google Analytics stopped working, so I found a self-hosted alternative and installed it on this website.</p>
<p><a href="https://matomo.org/">Matomo</a> is pretty good. It has all essential analytics features and respects user privacy. For example, I configured it anonymize last digits of user IP. For example, <code>167.99.219.223</code> will be changed to <code>167.99.219.000</code> before saving.</p>
<p>You can check if it tracks you (this is an <code>iframe</code>):</p>
<!-- raw HTML omitted -->
<p>If you don&rsquo;t want it, you can <a href="https://support.apple.com/kb/PH21416?locale=en_US">configure a browser</a>
to send &ldquo;Do not track me&rdquo; requests to websites.</p>
<h2 id="vpn">VPN</h2>
<p>And, of course, VPN. I hope everyone knows what it is.</p>
<p>This time I use <a href="https://libreswan.org/">Libreswan</a> and <a href="https://github.com/xelerance/xl2tpd">xl2tpd</a> setup.</p>
<p>If you are going to China, try <a href="https://github.com/StreisandEffect/streisand">streisand</a>.
VPN detecting and blocking technology there is the next level,
something simple will be banned within a couple of days for sure.</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="https://pi-hole.net/">PiHole</a></li>
<li><a href="https://github.com/ngalayko/server/blob/master/docker-compose.dns.yml">docker-compose file for PiHole</a></li>
<li><a href="https://firebog.net/">domains to block</a></li>
<li><a href="https://www.dnsoverride.com/">iOS app to change dns</a></li>
<li><a href="https://matomo.org/">Matomo</a></li>
<li><a href="https://github.com/ngalayko/server/blob/master/docker-compose.analytics.yml">docker-compose file for Matomo</a></li>
<li><a href="https://github.com/ngalayko/server/blob/master/docker-compose.vpn.yml">docker-compose file for VPN</a></li>
<li><a href="https://github.com/StreisandEffect/streisand">streisand vpn</a></li>
</ul>
]]></content></item><item><title>Docker compose for managing personal server</title><link>https://galaiko.rocks/posts/blog/docker-compose-server-manegement/</link><pubDate>Tue, 31 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/blog/docker-compose-server-manegement/</guid><description>For a long time, I tried to find the most comfortable way to manage a server where I host something for myself, some kind of DevOps framework. And I think I found the best way so far.
Since most of the times things I want to host are useless and I often change my mind, there are several requirements for it:
Easy to add/remove new components.
Let&amp;rsquo;s say I created a website, and a couple of days later I added a DNS server on the same host, and then I went to Russia, so I also need to host VPN.</description><content type="html"><![CDATA[<p>For a long time, I tried to find the most comfortable way to manage a server where I host
something for myself, some kind of DevOps framework. And I think I found the best way so far.</p>
<p>Since most of the times things I want to host are useless and I often change my mind,
there are several requirements for it:</p>
<ol>
<li>
<p><strong>Easy to add/remove new components.</strong></p>
<p>Let&rsquo;s say I created a website, and a couple of days later I added a DNS server
on the same host, and then I went to Russia, so I also need to host VPN. Later
I realize I don&rsquo;t really need DNS server, so I want to remove it.</p>
<p>Doing these things, I want to do only them. I don&rsquo;t really want to fix website
deployment while deploying VPN server, and accidentally remove VPN when stopping DNS server.</p>
</li>
<li>
<p><strong>No vendor lock.</strong></p>
<p>I want to remove, or start a new server with the same configuration on
different hosting provider any time I want. Digital Ocean, AWS, Google Cloud,
my old computer - whatever.</p>
</li>
<li>
<p><strong>Automate as much as possible.</strong></p>
<p>Deployment, https certificates for subdomains, restarting failed instances, etc.
I don&rsquo;t want to care about this at all.</p>
</li>
</ol>
<p>In the beginning, I was setting up Nginx on the host and Let&rsquo;s Encrypt certificates update.
So to add or remove something new I had to change nginx configuration for a hole server,
what could lead to crashing of all components because they are exposed to the world via
same Nginx. Also, I need new subdomain certs, because Let&rsquo;s encrypt didn&rsquo;t have
wildcards back then.</p>
<p>My first attempt to automate it was <a href="https://github.com/ngalayko/my_server">this</a>. Ansible roles
for each component (usually dockerized) and Makefile to execute them. The main problem was
that I had my own CI server running (for some reason).
That&rsquo;s why if it crashes, you should go and set it up back manually,
what is always a pain in the ass and takes some time. So a after couple of crashes,
it got boring, I stopped care about it and deleted host.</p>
<p>A couple of weeks ago I started this blog, so I tried to find a way to manage a host
server one more time.</p>
<p><a href="https://github.com/ngalayko/server">Here</a> it is.</p>
<p>There are 2 components:</p>
<ol>
<li>
<p><a href="https://github.com/ngalayko/server/blob/master/docker-compose.yml">Automated nginx-docker-with-lets-encrypt compose file</a></p>
<p>What it does is generating nginx configuration based on other containers in the
same docker network and taking care of https for them. You can read more in the
repository readme file, but basically, it contains three parts: nginx, nginx configuration generator
and a certificates generator using Let&rsquo;s Encrypt.</p>
<p>That allows us to add new components easily - just add new service to compose file
or remove one. Also, does not depend on host provider, because can be run on
pretty much any operating system.</p>
</li>
<li>
<p><a href="https://github.com/ngalayko/server/tree/master/.travis">Travis deployment</a></p>
<p>It logs in via ssh to your remote server and runs deployment script there.
Step-to-step explanation on how to set it up you can find
<a href="https://gist.github.com/nickbclifford/16c5be884c8a15dca02dca09f65f97bd">here</a>.
Only change I made there - added environment variables export, so it&rsquo;s possible
to strore secret keys in Travis.</p>
</li>
</ol>
<p>That&rsquo;s it! Travis <a href="https://github.com/ngalayko/server/blob/master/scripts/update.sh">executes</a> all compose files
in the folder, and removes orphan containers.</p>
<p>To add a new component to the system, I need to create a <a href="https://github.com/ngalayko/server/tree/master/blog">new folder</a>
or <a href="https://github.com/umputun/remark/tree/e278da3cd074b86c5d59359e4f1c615ab6f98b93">add git submodule</a> with a Dockerized
app and add a <a href="https://github.com/ngalayko/server/blob/master/docker-compose.dns.yml">docker-compose file</a>
to run it, following some rules, so nginx container can find it and create routes.</p>
<h2 id="links">Links</h2>
<ul>
<li><a href="https://gist.github.com/nickbclifford/16c5be884c8a15dca02dca09f65f97bd">Travis deployment configuration</a></li>
<li><a href="https://github.com/JrCs/docker-letsencrypt-nginx-proxy-companion">Docker Let&rsquo;s Encrypt Nginx proxy companion</a></li>
</ul>
]]></content></item><item><title>Half a year with vim</title><link>https://galaiko.rocks/posts/blog/half-a-year-with-vim/</link><pubDate>Sat, 21 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/blog/half-a-year-with-vim/</guid><description>I started using vim because I was bored. Likely, I code in go, so it’s pretty easy to switch. I mean, I tried to do Java with vim for about a week - and it’s a hell. So if your primary language requires massive IDE support, it’s not an option to completely switch to vim.
After slightly more than half a year of usage, I improved typing, navigation speed, and general comfort while I code.</description><content type="html"><![CDATA[<p><img src="/media/vim.jpg" alt="Vim learning curve"></p>
<p>I started using vim because I was bored. Likely, I code in go, so it’s pretty
easy to switch. I mean, I tried to do Java with vim for about a week -
and it’s a hell. So if your primary language requires massive IDE support,
it’s not an option to completely switch to vim.</p>
<p>After slightly more than half a year of usage, I improved typing,
navigation speed, and general comfort while I code.</p>
<p>Before I was using a mouse to navigate between files,
scrolling them to find something, But with vim,
your movements are minimal and efficient.</p>
<p>Also, it makes you think a bit more. Not only because you need to remember a
lot of commands and combinations, but because you always try to do something
by pressing the minimum number of keys possible.</p>
<p>I am going to describe my experience on how to start and make an
overview of the configuration I use.</p>
<h2 id="how-to-start">How to start</h2>
<h3 id="basics">Basics</h3>
<p>As a first step, to understand the basics, I suggest trying embedded vim tutor. You can run it by:</p>
<pre><code>$ vimtutor
</code></pre><p>It should be installed by default.</p>
<p>It’s a text file divided into lessons which will teach you to navigate, edit,
search and more - basics enough for daily use. I was doing this tutorial for a couple of
weeks until I was confident with each lesson.</p>
<p>Once you got used to <code>hjkl</code> navigation, stop doing it. The main power of vim is
navigation and clicking <code>hhhhhh</code> to get to another line, for instance, is
super inefficient. It can be as hard as switching to vim, but you will not
regret. Here is a <a href="https://www.youtube.com/watch?v=OnUiHLYZgaA">good video</a> about it.</p>
<h3 id="configuration">Configuration</h3>
<p>Some people suggest to use vanilla vim to start with, so you can understand
which functions you luck of comparing to IDE/editor you used to and do not
install a lot of useless plugins.</p>
<p>However, I think it makes sense to find the most popular configuration
for a language you use on GitHub and use it as a base.</p>
<p>After some time you most likely will optimize it for your usage.
I did exactly same, started with <a href="https://github.com/farazdagi/vim-go-ide">vim-go-ide</a>
and then <a href="https://github.com/ngalayko/vim-go-ide">forked it</a>.</p>
<h2 id="configuration-overwiew">Configuration overwiew</h2>
<p>Here is a list of plugins I use:</p>
<ul>
<li><a href="https://github.com/morhetz/gruvbox">gruvbox</a> - really good color scheme (I prefer dark version)</li>
<li><a href="https://github.com/Shougo/deoplete.nvim">deoplete.nvim</a> - fast-auto completion,
the first thing to have when you used to IDE</li>
<li><a href="https://github.com/zchee/deoplete-go">deoplete-go</a> - go specific completion options.
By default it can complete only words from the same file, recently used words, file paths</li>
<li><a href="https://github.com/roxma/nvim-yarp">nvim-yarp</a> - required by deoplete in order to work with vim8</li>
<li><a href="https://github.com/roxma/vim-hug-neovim-rpc">vim-hug-neovim-rpc</a> - same</li>
<li><a href="https://github.com/scrooloose/nerdtree">nerdtree</a> - the best plugin to navigate
in a directory tree. Has a lot of options from creating/deleting a file to some super weird I don’t use</li>
<li><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a> - super powerful git integration</li>
<li><a href="https://github.com/scrooloose/nerdcommenter">nerdcommenter</a> - smart commenting selected lines/parts of code</li>
<li><a href="https://github.com/fatih/vim-go">vim-go</a> - the main plugin if you code in Go. Includes a lot of commands,
syntax checking, syntax highlighting, go tools. Make sure you read documentation</li>
<li><a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a> - automatically close paired symbols e.x. brackets</li>
<li><a href="https://github.com/majutsushi/tagbar">tagbar</a> - overview of source code. variables / functions / classes / etc.</li>
<li><a href="https://github.com/junegunn/fzf">fzf</a> - if you still use <code>grep</code> or <code>ag</code>, check this out</li>
<li><a href="https://github.com/junegunn/fzf.vim">fzf.vim</a> - better fzf integration for vim.</li>
<li><a href="https://github.com/ekalinin/Dockerfile.vim">Dockerfile.vim</a> - Dockerfiles syntax highlighting</li>
<li><a href="https://github.com/mhinz/vim-signify">vim-signify</a> - hightlighting of changed lines of code for any vcs</li>
<li><a href="https://github.com/chr4/nginx.vim">nginx.vim</a> - nginx syntax highlighting</li>
</ul>
<h1 id="links">Links</h1>
<ul>
<li><a href="https://github.com/ngalayko/vim-go-ide">My fork of vim-go-ide</a></li>
<li><a href="https://www.youtube.com/watch?v=XA2WjJbmmoM">How to Do 90% of What Plugins Do (With Just Vim)</a></li>
<li><a href="https://www.youtube.com/watch?v=OnUiHLYZgaA">Improving Vim Speed</a></li>
</ul>
]]></content></item><item><title>Daily Coding Problem #15</title><link>https://galaiko.rocks/posts/dcp/probability/</link><pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/dcp/probability/</guid><description>Today problem is a probability problem.
Problem This problem was asked by Facebook.
Given a stream of elements too large to store in memory, pick a random element from the stream with uniform probability.
Solution There are many variations of such problems, and before solving it, I want to show some basic examples that I met.
Most trivial one is picking one random element from an array.
Every programming language has a function to generate a pseudo-random number (int or float) within the given range.</description><content type="html"><![CDATA[<p>Today problem is a <code>probability</code> problem.</p>
<h1 id="problem">Problem</h1>
<p>This problem was asked by Facebook.</p>
<p>Given a stream of elements too large to store in memory, pick a random element from the stream with uniform probability.</p>
<h1 id="solution">Solution</h1>
<p>There are many variations of such problems, and before solving it, I want to show some basic examples that I met.</p>
<p>Most trivial one is <strong>picking one random element from an array</strong>.</p>
<p>Every programming language has a function to generate a pseudo-random number (<code>int</code> or <code>float</code>) within the given range. If you think
of an array <strong>A</strong> as of <strong>N</strong> numbers, it&rsquo;s clear how to pick random one: generate number <strong>i</strong> from 0 to N, and <strong>a[i]</strong> is the answer.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">oneRandom</span><span class="p">(</span><span class="nx">a</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="nx">i</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span>
    <span class="k">return</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div><p>Sometimes you need to pick <strong>N random elements from an array</strong>.</p>
<p>In this case, you can use the same approach and pick <strong>N</strong> indexes from <strong>0</strong> to <strong>len(A)</strong>.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">nRandom</span><span class="p">(</span><span class="nx">a</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
    <span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> 
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nf">oneRandom</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>
</code></pre></div><p>However, if you need to pick <strong>N</strong> random elements, they also have to be <strong>different</strong>.</p>
<p>In this case, you can pick <strong>N</strong> different indexes and make sure that they are different:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">nDifferentRandom1</span><span class="p">(</span><span class="nx">a</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
    <span class="nx">m</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">bool</span><span class="p">{}</span>
    <span class="k">for</span> <span class="nb">len</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">n</span> <span class="p">{</span>
        <span class="nx">j</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span>
        <span class="nx">m</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="kc">true</span>
    <span class="p">}</span>

    <span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m</span> <span class="p">{</span>
        <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>
</code></pre></div><p>But it’s not very efficient, because you can spend much time trying to pick the
last index when you need to pick 8 elements from an array of length 10.</p>
<p>In this case, you can use the well-known zero-allocation algorithm to do so.
The idea is to move elements you picked to the beginning of an array,
and choose from others next:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">nDifferentRandom2</span><span class="p">(</span><span class="nx">a</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">chooseFrom</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">:]</span>                            <span class="c1">// define a slice to pick from
</span><span class="c1"></span>        <span class="nx">choosenIndex</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">chooseFrom</span><span class="p">))</span>     <span class="c1">// pick a random index from i to N
</span><span class="c1"></span>        <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">choosenIndex</span><span class="p">]</span> <span class="p">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">choosenIndex</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>  <span class="c1">// swap choosenElement with i
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="c1">// after all, we have choosen elements at the 
</span><span class="c1"></span>    <span class="c1">// begining of an array, and probability is always same.
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">a</span><span class="p">[:</span><span class="nx">n</span><span class="p">]</span> 
<span class="p">}</span>
</code></pre></div><p>Let&rsquo;s return to problem #15 and try to solve it using previous examples.</p>
<p>What do we have:</p>
<ol>
<li>a stream of elements too large to store in memory</li>
<li>should pick 1 random element</li>
</ol>
<p>We understand that to pick a random element from the stream with uniform probability,
we need to process hole stream somehow (without storing to memory).</p>
<p>Well, we always can iterate over a stream (but just once).</p>
<p>If we knew the length of a stream, we could use the approach from the first example, that would be perfect.</p>
<p>In first example each element of an array have a linked number - it&rsquo;s index.
Moreover, we used a function that returns number from 0 to n with uniform probability within that range to pick one.</p>
<p>So, in this case, we can <strong>assign</strong> a random value to each element with the same probability, and choose between them based on it linked number.</p>
<p>Let&rsquo;s do it: for each element, we generate a float number between <strong>[0..1]</strong>. Also, we remember
maximum value that we generated, an element from the stream associated with it - random element.</p>
<h1 id="code">Code</h1>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">in</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">res</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">result</span> <span class="kt">int</span>
		<span class="kd">var</span> <span class="nx">lastprob</span> <span class="kt">float64</span>
		<span class="k">for</span> <span class="nx">a</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">in</span> <span class="p">{</span>
			<span class="nx">prob</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Float64</span><span class="p">()</span>
			<span class="k">if</span> <span class="nx">prob</span> <span class="p">&gt;</span> <span class="nx">lastprob</span> <span class="p">{</span>
				<span class="nx">result</span> <span class="p">=</span> <span class="nx">a</span>
				<span class="nx">lastprob</span> <span class="p">=</span> <span class="nx">prob</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="nx">res</span> <span class="o">&lt;-</span> <span class="nx">result</span>
	<span class="p">}()</span>
	<span class="k">return</span> <span class="nx">res</span>
<span class="p">}</span>
</code></pre></div><h1 id="links">Links</h1>
<p><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-16">github</a></p>
]]></content></item><item><title>Daily Coding Problem #15</title><link>https://galaiko.rocks/posts/probability/</link><pubDate>Mon, 16 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/probability/</guid><description>Today problem is a probability problem.
Problem This problem was asked by Facebook.
Given a stream of elements too large to store in memory, pick a random element from the stream with uniform probability.
Solution There are many variations of such problems, and before solving it, I want to show some basic examples that I met.
Most trivial one is picking one random element from an array.
Every programming language has a function to generate a pseudo-random number (int or float) within the given range.</description><content type="html"><![CDATA[<p>Today problem is a <code>probability</code> problem.</p>
<h1 id="problem">Problem</h1>
<p>This problem was asked by Facebook.</p>
<p>Given a stream of elements too large to store in memory, pick a random element from the stream with uniform probability.</p>
<h1 id="solution">Solution</h1>
<p>There are many variations of such problems, and before solving it, I want to show some basic examples that I met.</p>
<p>Most trivial one is <strong>picking one random element from an array</strong>.</p>
<p>Every programming language has a function to generate a pseudo-random number (<code>int</code> or <code>float</code>) within the given range. If you think
of an array <strong>A</strong> as of <strong>N</strong> numbers, it&rsquo;s clear how to pick random one: generate number <strong>i</strong> from 0 to N, and <strong>a[i]</strong> is the answer.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">oneRandom</span><span class="p">(</span><span class="nx">a</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="nx">i</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span>
    <span class="k">return</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div><p>Sometimes you need to pick <strong>N random elements from an array</strong>.</p>
<p>In this case, you can use the same approach and pick <strong>N</strong> indexes from <strong>0</strong> to <strong>len(A)</strong>.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">nRandom</span><span class="p">(</span><span class="nx">a</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
    <span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> 
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nf">oneRandom</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>
</code></pre></div><p>However, if you need to pick <strong>N</strong> random elements, they also have to be <strong>different</strong>.</p>
<p>In this case, you can pick <strong>N</strong> different indexes and make sure that they are different:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">nDifferentRandom1</span><span class="p">(</span><span class="nx">a</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
    <span class="nx">m</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span><span class="kt">bool</span><span class="p">{}</span>
    <span class="k">for</span> <span class="nb">len</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">n</span> <span class="p">{</span>
        <span class="nx">j</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span>
        <span class="nx">m</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="kc">true</span>
    <span class="p">}</span>

    <span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m</span> <span class="p">{</span>
        <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>
</code></pre></div><p>But it’s not very efficient, because you can spend much time trying to pick the
last index when you need to pick 8 elements from an array of length 10.</p>
<p>In this case, you can use the well-known zero-allocation algorithm to do so.
The idea is to move elements you picked to the beginning of an array,
and choose from others next:</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">nDifferentRandom2</span><span class="p">(</span><span class="nx">a</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
        <span class="nx">chooseFrom</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">:]</span>                            <span class="c1">// define a slice to pick from
</span><span class="c1"></span>        <span class="nx">choosenIndex</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">chooseFrom</span><span class="p">))</span>     <span class="c1">// pick a random index from i to N
</span><span class="c1"></span>        <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">choosenIndex</span><span class="p">]</span> <span class="p">=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">choosenIndex</span><span class="p">],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>  <span class="c1">// swap choosenElement with i
</span><span class="c1"></span>    <span class="p">}</span>
    <span class="c1">// after all, we have choosen elements at the 
</span><span class="c1"></span>    <span class="c1">// begining of an array, and probability is always same.
</span><span class="c1"></span>    <span class="k">return</span> <span class="nx">a</span><span class="p">[:</span><span class="nx">n</span><span class="p">]</span> 
<span class="p">}</span>
</code></pre></div><p>Let&rsquo;s return to problem #15 and try to solve it using previous examples.</p>
<p>What do we have:</p>
<ol>
<li>a stream of elements too large to store in memory</li>
<li>should pick 1 random element</li>
</ol>
<p>We understand that to pick a random element from the stream with uniform probability,
we need to process hole stream somehow (without storing to memory).</p>
<p>Well, we always can iterate over a stream (but just once).</p>
<p>If we knew the length of a stream, we could use the approach from the first example, that would be perfect.</p>
<p>In first example each element of an array have a linked number - it&rsquo;s index.
Moreover, we used a function that returns number from 0 to n with uniform probability within that range to pick one.</p>
<p>So, in this case, we can <strong>assign</strong> a random value to each element with the same probability, and choose between them based on it linked number.</p>
<p>Let&rsquo;s do it: for each element, we generate a float number between <strong>[0..1]</strong>. Also, we remember
maximum value that we generated, an element from the stream associated with it - random element.</p>
<h1 id="code">Code</h1>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">in</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="nx">res</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">result</span> <span class="kt">int</span>
		<span class="kd">var</span> <span class="nx">lastprob</span> <span class="kt">float64</span>
		<span class="k">for</span> <span class="nx">a</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">in</span> <span class="p">{</span>
			<span class="nx">prob</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Float64</span><span class="p">()</span>
			<span class="k">if</span> <span class="nx">prob</span> <span class="p">&gt;</span> <span class="nx">lastprob</span> <span class="p">{</span>
				<span class="nx">result</span> <span class="p">=</span> <span class="nx">a</span>
				<span class="nx">lastprob</span> <span class="p">=</span> <span class="nx">prob</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="nx">res</span> <span class="o">&lt;-</span> <span class="nx">result</span>
	<span class="p">}()</span>
	<span class="k">return</span> <span class="nx">res</span>
<span class="p">}</span>
</code></pre></div><h1 id="links">Links</h1>
<p><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-16">github</a></p>
]]></content></item><item><title>Daily Coding Problem: Boring</title><link>https://galaiko.rocks/posts/dcp/boring/</link><pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/dcp/boring/</guid><description>Problem Hardest problem to solve so far: describing 30min trivial problems turned out to be much less fun than I imagined.
Problem #8: binary tree (fun, but always same) Problem #9: array operations (boring and always same) Problem #10: go basics (3 lines wtf) Problem #11: a search tree Problem #12: recursive algorithm (always same, sometimes hard to detect) Problem #13: string operations (super lame) I will keep updating GitHub, but not sure about the website.</description><content type="html"><![CDATA[<h1 id="problem">Problem</h1>
<p>Hardest problem to solve so far: <em>describing 30min trivial problems turned out to be much less fun than I imagined.</em></p>
<ul>
<li><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-09">Problem #8</a>: binary tree (fun, but always same)</li>
<li><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-10">Problem #9</a>: array operations (boring and always same)</li>
<li><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-11">Problem #10</a>: go basics (3 lines wtf)</li>
<li><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-12">Problem #11</a>: a search tree</li>
<li><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-13">Problem #12</a>: recursive algorithm (always same, sometimes hard to detect)</li>
<li><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-14">Problem #13</a>: string operations (super lame)</li>
</ul>
<p>I will keep updating GitHub, but not sure about the website.</p>
<h1 id="links">Links</h1>
<p><a href="https://github.com/ngalayko/dcp/tree/master/problems/">github</a></p>
]]></content></item><item><title>Daily Coding Problem: Problem #7</title><link>https://galaiko.rocks/posts/dcp/problem-7/</link><pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/dcp/problem-7/</guid><description>Problem This problem was asked by Facebook.
Given the mapping a = 1, b = 2, &amp;hellip; z = 26, and an encoded message, count the number of ways it can be decoded.
For example, the message &amp;lsquo;111&amp;rsquo; would give 3, since it could be decoded as &amp;lsquo;aaa&amp;rsquo;, &amp;lsquo;ka&amp;rsquo;, and &amp;lsquo;ak&amp;rsquo;.
You can assume that the messages are decodable. For example, &amp;lsquo;001&amp;rsquo; is not allowed.
Solution Firstly, let&amp;rsquo;s take care of a mapping.</description><content type="html"><![CDATA[<h1 id="problem">Problem</h1>
<p>This problem was asked by Facebook.</p>
<p>Given the mapping a = 1, b = 2, &hellip; z = 26, and an encoded message, count the number of ways it can be decoded.</p>
<p>For example, the message &lsquo;111&rsquo; would give 3, since it could be decoded as &lsquo;aaa&rsquo;, &lsquo;ka&rsquo;, and &lsquo;ak&rsquo;.</p>
<p>You can assume that the messages are decodable. For example, &lsquo;001&rsquo; is not allowed.</p>
<h1 id="solution">Solution</h1>
<p>Firstly, let&rsquo;s take care of a mapping. So if <code>a = 1</code>, then <code>charCode = code(char) - code('a') + 1</code>,
it&rsquo;s is possible, because in ASCII table letters of Latin alphabet are located one by one.
In the example, I use function <code>f(string)</code> that returns 1 if a string can be decoded, otherwise 0.</p>
<p>Most of the string parsing problems are recursion based. To start with such a solution,
it&rsquo;s always helpful to manually solve some trivial cases, trying to use
the results of a previous case:</p>
<p>If the length of a string is 1, there is always 1 way to decode it, so it&rsquo;s our base case.</p>
<pre><code>'1':
    ['1']

----------
F('1') = 1
</code></pre><p>If the length is 2, we always have 1 way with all digits separately, plus one if a number is less than <code>26</code>,
we also use this one as a base case.</p>
<pre><code>'12':
    ['1', '2']
    ['12']
---------------------
F('12') = f('12') + 1
</code></pre><p>If the length is 3, we can use the results of previous calculations, because we already know how to
deal with shorter strings.</p>
<pre><code>F('123') = f('1') * F('23') + F('12') * f('3') = 3
</code></pre><p>All next cases can be calculated using previously defined:</p>
<pre><code>F('4123') = f('4') * F('123') + f('41') * F('23') = 3
</code></pre><h1 id="code">Code</h1>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
        <span class="nx">firstZero</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;0&#39;</span>
        <span class="nx">l</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
        <span class="k">switch</span> <span class="p">{</span>
        <span class="k">case</span> <span class="nx">l</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="nf">canDecode</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
        <span class="k">case</span> <span class="nx">l</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="k">if</span> <span class="nx">firstZero</span> <span class="p">{</span>
                    <span class="c1">// endge case for strings like &#39;01&#39;
</span><span class="c1"></span>                    <span class="k">return</span> <span class="nf">canDecode</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="nf">canDecode</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">default</span><span class="p">:</span>
                <span class="k">return</span> <span class="nf">canDecode</span><span class="p">(</span><span class="nx">s</span><span class="p">[:</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="nf">solution</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span> <span class="o">+</span>
                        <span class="nf">canDecode</span><span class="p">(</span><span class="nx">s</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span><span class="o">*</span><span class="nf">solution</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="mi">2</span><span class="p">:])</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// returns 1 if possible to decode string.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">canDecode</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;0&#39;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">0</span>
        <span class="p">}</span>
        <span class="nx">i</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
                <span class="k">return</span> <span class="mi">0</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">26</span> <span class="p">{</span>
                <span class="k">return</span> <span class="mi">1</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></div><h1 id="links">Links</h1>
<p><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-08">github</a></p>
]]></content></item><item><title>Daily Coding Problem: Problem #5</title><link>https://galaiko.rocks/posts/dcp/problem-5/</link><pubDate>Fri, 06 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/dcp/problem-5/</guid><description>Problem This problem was asked by Jane Street.
cons(a, b) constructs a pair, and car(pair) and cdr(pair) returns the first and last element of that pair. For example, car(cons(3, 4)) returns 3, and cdr(cons(3, 4)) returns 4.
Given this implementation of cons:
def cons(a, b): def pair(f): return f(a, b) return pair Implement car and cdr.
Solution The main difficulty with functional programming when you are used to object-oriented is that you don&amp;rsquo;t have clear names for things that are happening (try to explain to anyone what monad is).</description><content type="html"><![CDATA[<h1 id="problem">Problem</h1>
<p>This problem was asked by Jane Street.</p>
<p>cons(a, b) constructs a pair, and car(pair) and cdr(pair) returns the first and last element of that pair. For example, car(cons(3, 4)) returns 3, and cdr(cons(3, 4)) returns 4.</p>
<p>Given this implementation of cons:</p>
<p>def cons(a, b):
def pair(f):
return f(a, b)
return pair
Implement car and cdr.</p>
<h1 id="solution">Solution</h1>
<p>The main difficulty with functional programming when you are used to object-oriented is that
you don&rsquo;t have clear names for things that are happening (try to explain to anyone what <em>monad</em> is).</p>
<p>Even if you never tried functional programming, it&rsquo;s is possible to guess how python solution
looks like. I will just put it and move to the next one in go.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">cons</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">pair</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">pair</span>

<span class="k">def</span> <span class="nf">car</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">left</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">a</span>
    <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="n">left</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">cdr</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">right</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">b</span>
    <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">car</span><span class="p">(</span><span class="n">cons</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)))</span>
<span class="k">print</span><span class="p">(</span><span class="n">cdr</span><span class="p">(</span><span class="n">cons</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)))</span>
</code></pre></div><p>So most of the functional programming is about passing a behavior to a function.</p>
<p>When in the object-oriented paradigm you have and interface and two implementations, in functional you
have a function (interface) that accepts another function (implementation) and calls it inside.</p>
<p>This particular problem is all about it.</p>
<p>We have <code>cons</code> - high order function that accepts two integers and returns another function,
which accepts the third function that knows how to operate with this integers. Sounds crazy, but let&rsquo;s try
to give names to all these kinds of function.</p>
<p>First of all, we need to define <code>choice</code>, that knows how to pick one integer out of two.</p>
<p>The function that is returned by given implementation of <code>cons</code> I called <code>makeChoice</code>. This type of function knows
what to do with given choice.</p>
<p>Given function <code>cons</code> constructs <code>makeChoice</code> function using input integers.</p>
<p>We should implement two functions that will apply two kinds of behavior using given <code>makeChoice</code>.</p>
<p>Now when we can name function types and understand what they do, it&rsquo;s much easier to write the solution.</p>
<h1 id="code">Code</h1>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

        <span class="nx">car</span> <span class="o">:=</span> <span class="nf">car</span><span class="p">(</span><span class="nf">cons</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
        <span class="nx">cdr</span> <span class="o">:=</span> <span class="nf">cdr</span><span class="p">(</span><span class="nf">cons</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>

        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;car: %d, cdr: %d\n&#34;</span><span class="p">,</span> <span class="nx">car</span><span class="p">,</span> <span class="nx">cdr</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">choise</span> <span class="kd">func</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span>

<span class="kd">type</span> <span class="nx">makeChoise</span> <span class="kd">func</span><span class="p">(</span><span class="nx">choise</span><span class="p">)</span> <span class="kt">int</span>

<span class="kd">func</span> <span class="nf">cons</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">makeChoise</span> <span class="p">{</span>
        <span class="nx">p</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="nx">choise</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nf">i</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">p</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">car</span><span class="p">(</span><span class="nx">do</span> <span class="nx">makeChoise</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
        <span class="nx">chooseRight</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">a</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nf">do</span><span class="p">(</span><span class="nx">chooseRight</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">cdr</span><span class="p">(</span><span class="nx">do</span> <span class="nx">makeChoise</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
        <span class="nx">chooseLeft</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">b</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nf">do</span><span class="p">(</span><span class="nx">chooseLeft</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h1 id="links">Links</h1>
<p><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-06">github</a></p>
]]></content></item><item><title>Daily Coding Problem: Problem #4</title><link>https://galaiko.rocks/posts/dcp/problem-4/</link><pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/dcp/problem-4/</guid><description>Problem This problem was asked by Stripe.
Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.
For example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.
You can modify the input array in-place.</description><content type="html"><![CDATA[<h1 id="problem">Problem</h1>
<p>This problem was asked by Stripe.</p>
<p>Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.</p>
<p>For example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.</p>
<p>You can modify the input array in-place.</p>
<h1 id="solution">Solution</h1>
<p>To solve this, you should think what’s common between array indexes and a
positive integer:  it’s the same thing.</p>
<p>So we put each positive integer of an
array at its place (i+1 since we count from 1) and then iterate again to find
first missing.</p>
<p>If we don’t, return length plus one (=next).</p>
<h1 id="code">Code</h1>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">aa</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="mi">1</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">a</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">aa</span> <span class="p">{</span> <span class="c1">// try to place all numbers at same index (from 1)
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">a</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span> <span class="c1">// we don&#39;t care, it&#39;s negative
</span><span class="c1"></span>			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">a</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// we don&#39;t care, result always &lt; len(aa)
</span><span class="c1"></span>			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="nx">aa</span><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">a</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">aa</span> <span class="p">{</span> <span class="c1">// find first missing
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1">// all there
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><h1 id="benchmarks">Benchmarks</h1>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">goos</span><span class="p">:</span> <span class="nx">darwin</span>
<span class="nx">goarch</span><span class="p">:</span> <span class="nx">amd64</span>
<span class="nx">pkg</span><span class="p">:</span> <span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">ngalayko</span><span class="o">/</span><span class="nx">dcp</span><span class="o">/</span><span class="nx">problems</span><span class="o">/</span><span class="mi">2018</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mo">05</span>
<span class="nx">Benchmark</span><span class="o">/</span><span class="mi">0</span><span class="o">-</span><span class="mi">4</span>   <span class="mi">1000000000</span>               <span class="mf">2.18</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>            <span class="mi">0</span> <span class="nx">B</span><span class="o">/</span><span class="nx">op</span>          <span class="mi">0</span> <span class="nx">allocs</span><span class="o">/</span><span class="nx">op</span>
<span class="nx">Benchmark</span><span class="o">/</span><span class="mi">100</span><span class="o">-</span><span class="mi">4</span>                 <span class="mi">20000000</span>                <span class="mf">65.0</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>             <span class="mi">0</span> <span class="nx">B</span><span class="o">/</span><span class="nx">op</span>          <span class="mi">0</span> <span class="nx">allocs</span><span class="o">/</span><span class="nx">op</span>
<span class="nx">Benchmark</span><span class="o">/</span><span class="mi">200</span><span class="o">-</span><span class="mi">4</span>                 <span class="mi">10000000</span>               <span class="mi">122</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>               <span class="mi">0</span> <span class="nx">B</span><span class="o">/</span><span class="nx">op</span>          <span class="mi">0</span> <span class="nx">allocs</span><span class="o">/</span><span class="nx">op</span>
<span class="nx">Benchmark</span><span class="o">/</span><span class="mi">300</span><span class="o">-</span><span class="mi">4</span>                 <span class="mi">10000000</span>               <span class="mi">178</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>               <span class="mi">0</span> <span class="nx">B</span><span class="o">/</span><span class="nx">op</span>          <span class="mi">0</span> <span class="nx">allocs</span><span class="o">/</span><span class="nx">op</span>
<span class="nx">Benchmark</span><span class="o">/</span><span class="mi">400</span><span class="o">-</span><span class="mi">4</span>                 <span class="mi">10000000</span>               <span class="mi">238</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>               <span class="mi">0</span> <span class="nx">B</span><span class="o">/</span><span class="nx">op</span>          <span class="mi">0</span> <span class="nx">allocs</span><span class="o">/</span><span class="nx">op</span>
<span class="nx">Benchmark</span><span class="o">/</span><span class="mi">500</span><span class="o">-</span><span class="mi">4</span>                  <span class="mi">5000000</span>               <span class="mi">295</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>               <span class="mi">0</span> <span class="nx">B</span><span class="o">/</span><span class="nx">op</span>          <span class="mi">0</span> <span class="nx">allocs</span><span class="o">/</span><span class="nx">op</span>
<span class="nx">Benchmark</span><span class="o">/</span><span class="mi">600</span><span class="o">-</span><span class="mi">4</span>                  <span class="mi">5000000</span>               <span class="mi">354</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>               <span class="mi">0</span> <span class="nx">B</span><span class="o">/</span><span class="nx">op</span>          <span class="mi">0</span> <span class="nx">allocs</span><span class="o">/</span><span class="nx">op</span>
<span class="nx">Benchmark</span><span class="o">/</span><span class="mi">700</span><span class="o">-</span><span class="mi">4</span>                  <span class="mi">3000000</span>               <span class="mi">410</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>               <span class="mi">0</span> <span class="nx">B</span><span class="o">/</span><span class="nx">op</span>          <span class="mi">0</span> <span class="nx">allocs</span><span class="o">/</span><span class="nx">op</span>
<span class="nx">Benchmark</span><span class="o">/</span><span class="mi">800</span><span class="o">-</span><span class="mi">4</span>                  <span class="mi">3000000</span>               <span class="mi">466</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>               <span class="mi">0</span> <span class="nx">B</span><span class="o">/</span><span class="nx">op</span>          <span class="mi">0</span> <span class="nx">allocs</span><span class="o">/</span><span class="nx">op</span>
<span class="nx">Benchmark</span><span class="o">/</span><span class="mi">900</span><span class="o">-</span><span class="mi">4</span>                  <span class="mi">3000000</span>               <span class="mi">528</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>               <span class="mi">0</span> <span class="nx">B</span><span class="o">/</span><span class="nx">op</span>          <span class="mi">0</span> <span class="nx">allocs</span><span class="o">/</span><span class="nx">op</span>
<span class="nx">PASS</span>
<span class="nx">ok</span>      <span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">ngalayko</span><span class="o">/</span><span class="nx">dcp</span><span class="o">/</span><span class="nx">problems</span><span class="o">/</span><span class="mi">2018</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="mo">05</span>     <span class="mf">19.293</span><span class="nx">s</span>
</code></pre></div><h1 id="update">UPDATE</h1>
<p>As it was mentioned in the comments, the first solution fails in
case of [3,2,4,-1,1]</p>
<p>It happens because when we place an integer to its position in the array,
we also delete integer that used to be in that place.</p>
<p>To avoid this, instead of just placing the integer, I swap it with the current
one and process current index one more time.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">aa</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="mi">1</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">a</span> <span class="o">:=</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
		<span class="k">if</span> <span class="nx">a</span> <span class="p">&lt;</span> <span class="mi">0</span> <span class="p">{</span> <span class="c1">// we don&#39;t care, it&#39;s negative
</span><span class="c1"></span>			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">a</span> <span class="o">&gt;=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// we don&#39;t care, result always &lt; len(aa)
</span><span class="c1"></span>			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">a</span> <span class="o">==</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span> <span class="c1">// if integer on it&#39;s place, skip
</span><span class="c1"></span>			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="c1">// put each integer on it&#39;s place
</span><span class="c1"></span>		<span class="c1">// decrease i, because aa[i] is a new integer now and we need to
</span><span class="c1"></span>		<span class="c1">// process it one more time
</span><span class="c1"></span>		<span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
		<span class="nx">i</span><span class="o">--</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">aa</span> <span class="p">{</span> <span class="c1">// find first missing
</span><span class="c1"></span>		<span class="k">if</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1">// all there
</span><span class="c1"></span><span class="p">}</span>
</code></pre></div><h1 id="links">Links</h1>
<p><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-05">github</a></p>
]]></content></item><item><title>Daily Coding Problem: Problem #3</title><link>https://galaiko.rocks/posts/dcp/problem-3/</link><pubDate>Wed, 04 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/dcp/problem-3/</guid><description>Problem This problem was asked by Google.
Given the root to a binary tree, implement serialize(root), which serializes the tree into a string, and deserialize(s), which deserializes the string back into the tree.
For example, given the following Node class
class Node: def init(self, val, left=None, right=None): self.val = val self.left = left self.right = right The following test should pass:
node = Node(&amp;lsquo;root&amp;rsquo;, Node(&amp;lsquo;left&amp;rsquo;, Node(&amp;lsquo;left.left&amp;rsquo;)), Node(&amp;lsquo;right&amp;rsquo;)) assert deserialize(serialize(node)).left.left.val == &amp;lsquo;left.</description><content type="html"><![CDATA[<h1 id="problem">Problem</h1>
<p>This problem was asked by Google.</p>
<p>Given the root to a binary tree, implement serialize(root), which serializes the tree into a string, and deserialize(s), which deserializes the string back into the tree.</p>
<p>For example, given the following Node class</p>
<p>class Node: def init(self, val, left=None, right=None): self.val = val self.left = left self.right = right The following test should pass:</p>
<p>node = Node(&lsquo;root&rsquo;, Node(&lsquo;left&rsquo;, Node(&lsquo;left.left&rsquo;)), Node(&lsquo;right&rsquo;)) assert deserialize(serialize(node)).left.left.val == &lsquo;left.left&rsquo;</p>
<h1 id="solution">Solution</h1>
<p>This one is weird. It doesn&rsquo;t say we can&rsquo;t use standard library, so I will just use it.</p>
<h1 id="code">Code</h1>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">node</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Value</span> <span class="kt">string</span> <span class="s">`json:&#34;value&#34;`</span>
	<span class="nx">Left</span>  <span class="o">*</span><span class="nx">node</span>  <span class="s">`json:&#34;left&#34;`</span>
	<span class="nx">Right</span> <span class="o">*</span><span class="nx">node</span>  <span class="s">`json:&#34;right&#34;`</span>
<span class="p">}</span>

<span class="c1">// New is a node constructor.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">v</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">l</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">node</span><span class="p">)</span> <span class="o">*</span><span class="nx">node</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">node</span><span class="p">{</span>
		<span class="nx">Value</span><span class="p">:</span> <span class="nx">v</span><span class="p">,</span>
		<span class="nx">Left</span><span class="p">:</span>  <span class="nx">l</span><span class="p">,</span>
		<span class="nx">Right</span><span class="p">:</span> <span class="nx">r</span><span class="p">,</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// Serialize returns string representation of a node.
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">node</span><span class="p">)</span> <span class="nf">Serialize</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
	<span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span> <span class="nx">err</span>
<span class="p">}</span>

<span class="c1">// Deserialize returns node from it&#39;s string representation.
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Deserialize</span><span class="p">(</span><span class="nx">s</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">node</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">n</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">node</span><span class="p">)</span>
	<span class="k">return</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span> <span class="nx">n</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h1 id="links">Links</h1>
<p><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-04">github</a></p>
]]></content></item><item><title>Daily Coding Problem: Problem #2</title><link>https://galaiko.rocks/posts/dcp/problem-2/</link><pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/dcp/problem-2/</guid><description>Problem This problem was asked by Uber.
Given an array of integers, return a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i.
For example, if our input was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected output would be [2, 3, 6].</description><content type="html"><![CDATA[<h1 id="problem">Problem</h1>
<p>This problem was asked by Uber.</p>
<p>Given an array of integers, return a new array such that each element at
index i of the new array is the product of all the numbers in the original array except the one at i.</p>
<p>For example, if our input was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24].
If our input was [3, 2, 1], the expected output would be [2, 3, 6].</p>
<p>Follow-up: what if you can&rsquo;t use division?</p>
<h1 id="solution">Solution</h1>
<p>For this one, I have 2 solutions, with and without division. Follow-up in the
problem text should mean that it’s easier to solve it if you don’t have division,
but in reality, division causes many problems, since you can accidentally divide by zero.</p>
<h2 id="first">First</h2>
<p>Without edge cases it’s pretty straightforward: get the product of all array elements,
then in the loop, divide that product by each element. As a result,
you get the product of all elements except for the current one.</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">solution_no_edge_cases</span><span class="p">(</span><span class="nx">aa</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
	<span class="nx">result</span> <span class="o">:=</span> <span class="mi">1</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">a</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">aa</span> <span class="p">{</span>
		<span class="nx">result</span> <span class="o">*=</span> <span class="nx">a</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">aa</span> <span class="p">{</span>
		<span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">result</span> <span class="o">/</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">aa</span>
<span class="p">}</span>
</code></pre></div><pre><code>a * b * c / a = b * c 
a * b * c / b = a * c 
a * b * c / c = a * b 
</code></pre><p>Only problem - zeros. We have 2 edge cases there:</p>
<ol>
<li>
<p>One zero in an array.</p>
<p>In this case, the result should be all zeroes except for the 0 elements.
That element should contain the product of all others.</p>
</li>
<li>
<p>Two zeros in array or more.</p>
<p>This case is pretty much like the first one, but result array always
contains only zeros. Because you there are always 0 elements in the product.</p>
</li>
</ol>
<p>To avoid edge cases, we calculate the product of all elements except zero and also count them.</p>
<p>So if we have two or more zeros in the input array, we can return an array of 0 right away.</p>
<p>Otherwise, we iterate over an array to replace zero elements to the product we
calculated and all other elements to zero.</p>
<p>If we don’t have zeros in an array, all these conditions are skipped,
and we get the correct result.</p>
<h2 id="code">Code</h2>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">aa</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">)</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">aa</span>
	<span class="p">}</span>
	<span class="nx">result</span> <span class="o">:=</span> <span class="mi">1</span>
	<span class="nx">countZero</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">a</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">aa</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">a</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
			<span class="nx">countZero</span><span class="o">++</span>
			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="nx">result</span> <span class="o">*=</span> <span class="nx">a</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="nx">countZero</span> <span class="p">&gt;</span> <span class="mi">1</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">))</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">aa</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
			<span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">result</span>
			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="k">if</span> <span class="nx">countZero</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
			<span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span>
			<span class="k">continue</span>
		<span class="p">}</span>
		<span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">result</span> <span class="o">/</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">aa</span>
<span class="p">}</span>
</code></pre></div><h2 id="second">Second</h2>
<p>The second solution is more complicated because it&rsquo;s always O(n^2), but there are no edge cases here.
Just use common logic from yesterday <a href="../2018-07-02">Problem #1</a>, and get production of each
elements pairs, except with itself.</p>
<h2 id="code-1">Code</h2>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">solution2</span><span class="p">(</span><span class="nx">aa</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">)</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">aa</span>
	<span class="p">}</span>
	<span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">))</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">aa</span> <span class="p">{</span>
		<span class="nx">v</span> <span class="o">:=</span> <span class="mi">1</span>
		<span class="k">for</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">aj</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">aa</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="nx">j</span> <span class="p">{</span>
				<span class="k">continue</span>
			<span class="p">}</span>
			<span class="nx">v</span> <span class="o">*=</span> <span class="nx">aj</span>
		<span class="p">}</span>
		<span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">v</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">result</span>
<span class="p">}</span>
</code></pre></div><h1 id="links">Links</h1>
<p><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-03">github</a></p>
]]></content></item><item><title>Daily Coding Problem: Problem #1</title><link>https://galaiko.rocks/posts/dcp/problem-1/</link><pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/dcp/problem-1/</guid><description>Problem This problem was recently asked by Google.
Given a list of numbers and a number k, return whether any two numbers from the list add up to k.
For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.
Bonus: Can you do this in one pass?
Solution If we want to find the sum of every combination of two array elements most obvious way is to create two for loops over an array and check if they satisfy our condition.</description><content type="html"><![CDATA[<h1 id="problem">Problem</h1>
<p>This problem was recently asked by Google.</p>
<p>Given a list of numbers and a number k, return whether any two numbers from the list add up to k.</p>
<p>For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.</p>
<p>Bonus: Can you do this in one pass?</p>
<h1 id="solution">Solution</h1>
<p>If we want to find the sum of every combination of two array elements most
obvious way is to create two <code>for</code> loops over an array and check if they
satisfy our condition.</p>
<p>However, for such cases, you can always reduce complexity from O(n^2) to
O(log(n)) by just starting the second loop from current array element, because,
on each step of the first loop, all previous elements are already compared to each other.</p>
<p>So the solution is to iterate over an array, and for each element try to find if
it adds up any next array element up to 17.</p>
<h1 id="code">Code</h1>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">aa</span> <span class="p">[]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">k</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
    <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">a</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">aa</span> <span class="p">{</span>
        <span class="nx">rest</span> <span class="o">:=</span> <span class="nx">k</span> <span class="o">-</span> <span class="nx">a</span>
        <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="nx">i</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">aa</span><span class="p">);</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
            <span class="k">if</span> <span class="nx">aa</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="nx">rest</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">false</span>
<span class="p">}</span>
</code></pre></div><h1 id="links">Links</h1>
<p><a href="https://github.com/ngalayko/dcp/tree/master/problems/2018-07-02">github</a></p>
]]></content></item><item><title>Daily Coding Problem</title><link>https://galaiko.rocks/posts/dcp/intro/</link><pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate><guid>https://galaiko.rocks/posts/dcp/intro/</guid><description>Recently found this website Daily Coding Problem, where you can subscribe to a newsletter and get one problem a day.
For a long time, I wanted to start solving problems from leetcode to keep fit, but could never begin.
Also, for a long time, I wanted to start a blog, but could never begin.
Writing short articles about how I solve thus problems seems for me as an excellent opportunity to start doing both, so every day I will publish my solution for the daily problem here, and to my GitHub page trying to explain why and how I solved it.</description><content type="html"><![CDATA[<p>Recently found this website <a href="https://www.dailycodingproblem.com/%5D">Daily Coding Problem</a>,
where you can subscribe to a newsletter and get one problem a day.</p>
<p>For a long time, I wanted to start solving problems from leetcode to keep fit,
but could never begin.</p>
<p>Also, for a long time, I wanted to start a blog, but could never begin.</p>
<p>Writing short articles about how I solve thus problems seems for me as an excellent
opportunity to start doing both, so every day I will publish my solution for
the daily problem here, and to <a href="https://github.com/ngalayko/dcp">my GitHub</a> page trying to explain why and how I solved it.</p>
]]></content></item></channel></rss>